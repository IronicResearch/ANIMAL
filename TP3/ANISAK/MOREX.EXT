
(* Miscellaneous additional MCPU commands. *)
(* Uses extended 24-bit step counts. *)

(* PREPM pre-computes the motor step count parameters for the MCPU. *)

PROCEDURE PREPM (VAR M : AXIS);

BEGIN

     IF M.STEPCNT < 0
          THEN M.DIR := REV
          ELSE M.DIR := FWD;

     M.STEPCNT := ABS (M.STEPCNT);

END;

(* MOVEM pre-sets the minimum stepping motor information to the MCPU
(* for use in synchronously activated motor axes. *)
(* For use in nested MCPU 'Drive' command block sequences. *)

PROCEDURE MOVEM (VAR M : AXIS);

VAR MOTORNO : CHAR;
    BYTE_L : CHAR;
    BYTE_H : CHAR;
    BYTE_X : CHAR;

BEGIN

   OUTCMD ('D');        (* 'Drive' *)

   OUTCMD ('M');        (* 'Motor #' *)
   MOTORNO := CHR (M.MOTORNO);
   OUTSIO (MOTORNO);

   OUTCMD ('N');        (* 'Step Count' *)
   REALBYTE (M.STEPCNT, BYTE_L, BYTE_H, BYTE_X);
   OUTSIO (BYTE_L);
   OUTSIO (BYTE_H);

   OUTCMD ('X');
   OUTSIO (BYTE_X);

   IF M.DIR = FWD       (* 'Fwd/Rev' *)
      THEN OUTCMD ('F')
      ELSE OUTCMD ('R');

END;

(* 'RUN MOTOR' is the same as 'MOVE MOTOR'. *)
(* For use in nested MCPU 'Run' command block sequences. *)

PROCEDURE RUNX (VAR M : AXIS);

BEGIN

   MOVEM (M);

END;

(* 'INITIALIZE MOTOR' initializes the specified motor for
(* either constant speed or ramping speed operation. *)
(* For use in nested MCPU 'Initialize' command block sequences. *)

PROCEDURE INITX (VAR M : AXIS);

VAR BYTE : CHAR;
    MOTOR_NO : CHAR;
    COUNT_L : CHAR;
    COUNT_H : CHAR;
    RATE_L : CHAR;
    RATE_H : CHAR;

BEGIN

   OUTCMD ('I');             (* Initialize... *)

   OUTCMD ('M');             (* Motor # *)
   MOTOR_NO := CHR (M.MOTORNO);
   OUTSIO (MOTOR_NO);

   IF NOT M.ACCELST

      THEN BEGIN
           OUTCMD ('V');           (* Velocity *)
           INTBYTE (M.SPEED, RATE_L, RATE_H);
           OUTSIO (RATE_L);
           OUTSIO (RATE_H);
           END

      ELSE BEGIN
           OUTCMD ('A');           (* Acceleration *)
           INTBYTE (M.LOWSPD, RATE_L, RATE_H);
           OUTSIO (RATE_L);
           OUTSIO (RATE_H);        (* Low Speed *)

           INTBYTE (M.HIGHSPD, RATE_L, RATE_H);
           OUTSIO (RATE_L);
           OUTSIO (RATE_H);        (* High Speed *)

           INTBYTE (M.RAMPCNT, COUNT_L, COUNT_H);
           OUTSIO (COUNT_L);
           OUTSIO (COUNT_H);       (* Ramp Count *)

           INTBYTE (M.RAMPK, COUNT_L, COUNT_H);
           OUTSIO (COUNT_L);
           OUTSIO (COUNT_H);       (* Ramping Constant *)
           END;

END;

(* 'KILL MOTOR' stops the specified motor in mid flight. *)
(* For use in nested MCPU 'Kill' command block sequences. *)

PROCEDURE KILLX (VAR M : AXIS);

VAR BYTE : CHAR;
    MOTOR_NO : CHAR;

BEGIN

   OUTCMD ('K');             (* Kill... *)

   OUTCMD ('M');             (* Motor # *)
   MOTOR_NO := CHR (M.MOTORNO);
   OUTSIO (MOTOR_NO);

END;

(* 'ZERO MOTOR' zeroes out an MCPU axis step position. *)
(* For use in nested MCPU 'Zero' command block sequences. *)

PROCEDURE ZEROX (VAR M : AXIS);

VAR BYTE : CHAR;
    MOTOR_NO : CHAR;

BEGIN

   OUTCMD ('0');             (* Zero... *)

   OUTCMD ('M');             (* Motor # *)
   MOTOR_NO := CHR (M.MOTORNO);
   OUTSIO (MOTOR_NO);

END;

(* 'STATUS MOTOR' gets the current status and step count of a specified axis
(* directly from the Motion Control Processor Unit. *)
(* For use in nested MCPU 'Status' command block sequences. *)
(* Includes valid status verification loop with MCPU. *)

PROCEDURE STATX (VAR C : COUNT_TABLE);

VAR BYTE : CHAR;
    MOTORNO : CHAR;
    COUNT_L : CHAR;
    COUNT_H : CHAR;
    COUNT_X : CHAR;
    COUNT : REAL;
    STAT : CHAR;
    VALID_RESPONSE : BOOLEAN;

BEGIN

REPEAT

   OUTCMD ('?');     (* Inquiry *)

   OUTCMD ('M');     (* Motor # *)
   MOTORNO := CHR (C.AXISNO);
   OUTSIO (MOTORNO);

   OUTCMD ('S');     (* get Status byte *)
   INSIO (STAT);

   CASE STAT OF
        'D' : VALID_RESPONSE := TRUE;
        'M' : VALID_RESPONSE := TRUE;
        'S' : VALID_RESPONSE := TRUE;
        'E' : VALID_RESPONSE := TRUE;
        'R' : VALID_RESPONSE := FALSE;
        'N' : VALID_RESPONSE := FALSE;
        ELSE  VALID_RESPONSE := FALSE;
        END;

   IF NOT VALID_RESPONSE
      THEN BEGIN

           REPEAT
              OUTCMD ('Z');        (* C'mon now...  *)
              INSIO (BYTE);
           UNTIL BYTE = 'R';       (* Ready again ? *)

           OUTCMD ('W');           (* Wake up again *)
           END;

UNTIL VALID_RESPONSE;

   C.STAT := STAT;
   IF STAT = 'E'     (* Error ? *)
      THEN C.ERROR := TRUE
      ELSE C.ERROR := FALSE;

   OUTCMD ('L');     (* get Low byte *)
   INSIO (COUNT_L);

   OUTCMD ('H');     (* get High byte *)
   INSIO (COUNT_H);

   OUTCMD ('X');     (* get Extra byte *)
   INSIO (COUNT_X);

   BYTEREAL (COUNT_L, COUNT_H, COUNT_X, COUNT);
   C.COUNT := COUNT;

END;

(* EXPOSE_IT outputs the camera exposure sequence to the MCPU,
(* and waits til it's over. *)

PROCEDURE EXPOSEIT;

VAR BYTE : CHAR;
    TIME : INTEGER;
    BYTE_L : CHAR;
    BYTE_H : CHAR;

BEGIN

   REPEAT
      INSIO (BYTE);
   UNTIL BYTE = 'R';     (* Ready ? *)

   OUTCMD ('W');         (* Wake-up *)

   OUTCMD ('D');         (* Camera exposure *)

   OUTCMD ('M');         (* Camera Exposure axis *)
   BYTE_L := CHR (E.M.MOTORNO);
   OUTSIO (BYTE_L);

   OUTCMD ('N');         (* Number of exposures *)
   INTBYTE (FRAME_STEP, BYTE_L, BYTE_H);
   OUTSIO (BYTE_L);
   OUTSIO (BYTE_H);

   OUTCMD ('V');         (* Exposure Time *)
   TIME := ROUND (EXPOSURE_TIME * 100);
   INTBYTE (TIME, BYTE_L, BYTE_H);
   OUTSIO (BYTE_L);
   OUTSIO (BYTE_H);

   IF E.M.DIR = REV      (* Forward/Reverse *)
      THEN OUTCMD ('R')
      ELSE OUTCMD ('F');

   OUTCMD ('Z');         (* Zzzzz *)

END;

