
(* Keyboard Input Functions. *)

(* READ KEYBOARD STATUS gets the input status of the keyboard. *)

PROCEDURE RDKEYST (VAR KEYSTAT : BOOLEAN);

BEGIN

   KEYSTAT := KEYPRESSED;

END;

(* READ KEY reads in a character from the keyboard without echoing it. *)
(* Includes lower case to upper case conversion for ANIMAL comands. *)

PROCEDURE RDKEY (VAR KEY : CHAR);

BEGIN

   READ (KBD, KEY);
   KEY := UPCASE (KEY);

END;

(* READ CONSOLE reads a single character from the console. (Echo output) *)
(* Includes lower case to upper case conversion for ANIMAL comands. *)

PROCEDURE RDCON (VAR CH : CHAR);

BEGIN

   READ (KBD, CH);
   CH := UPCASE (CH);
   WRITE (CH);

END;

(* CLEAR KEYBOARD clears out the keyboard input status and input buffer. *)

PROCEDURE CLRKEY;

TYPE REGISTER_SET = RECORD
        AX,BX,CX,DX,BP,SI,DI,DS,ES,FLAGS : INTEGER;
        END;

VAR REG : REGISTER_SET;

BEGIN

   REG.AX := $0C * 256 + $06;       (* AH <-- Clear-Keyboard fn *)
   REG.DX := $FF;
   MSDOS (REG);                     (* AL <-- Read-Immediate fn *)

END;

(* READ REAL reads a real number with Input checking toggled off. *)

PROCEDURE RDREAL (VAR R : REAL);

VAR REAL_NUMBER : BOOLEAN;

BEGIN

   REPEAT

      {$I-}
      READ (R);
      {$I+}
      REAL_NUMBER := (IORESULT = 0);
      IF NOT REAL_NUMBER
         THEN WRITE (^G, ' ...ERROR -- Number only: ');

   UNTIL REAL_NUMBER;

END;

(* READLN REAL reads a real number and ends the line. *)

PROCEDURE RDLNREAL (VAR R : REAL);

VAR REAL_NUMBER : BOOLEAN;

BEGIN

   REPEAT

      {$I-}
      READLN (R);
      {$I+}
      REAL_NUMBER := (IORESULT = 0);
      IF NOT REAL_NUMBER
         THEN WRITE (^G, 'ERROR -- Please enter a number only: ');

   UNTIL REAL_NUMBER;

END;

(* READ INTEGER reads an integer number with Input checking toggled off. *)
(* Uses READ REAL for input and scales into integer range accordingly. *)

PROCEDURE RDINT (VAR I : INTEGER);

VAR R : REAL;

BEGIN

   R := I;
   RDREAL (R);
   IF R > MAXINT
        THEN I := MAXINT
   ELSE IF R < -1 * MAXINT
        THEN I := -1 * MAXINT
   ELSE I := ROUND (R);

END;

(* READLN INTEGER reads an integer number and ends the line. *)

PROCEDURE RDLNINT (VAR I : INTEGER);

VAR R : REAL;

BEGIN

   R := I;
   RDLNREAL (R);
   IF R > MAXINT
        THEN I := MAXINT
   ELSE IF R < -1 * MAXINT
        THEN I := -1 * MAXINT
   ELSE I := ROUND (R);

END;

