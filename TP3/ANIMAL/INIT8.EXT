VAR        SEQUENCE_TIME : REAL;
           REMOTE : BOOLEAN;
           DISPLAY : BOOLEAN;
           REVERSE : BOOLEAN;

(* INIT LOAD initializes and loads all of the one-time ANIMAL info. *)

OVERLAY PROCEDURE INIT_LOAD;

(* INITIALIZE MCPU finds out if the MCPU is ready for communications
(* with the host desktop computer. *)

PROCEDURE INIT_MCPU;

VAR BYTE : CHAR;
    CH : CHAR;

BEGIN

   OUTCMD ('Z');
   INSIO (BYTE);
   IF BYTE <> 'R'
      THEN REPEAT
              WRITELN ('MCPU Not Ready Yet');
              WRITELN ('--Either Reset MCPU');
              WRITE   ('--Or Abort Program Here (^C) > ');
              RDCON (CH);
              MCPU_INSTALLED := ((CH = 'Y') OR (CH = ^M));
              WRITELN;
              WRITELN;
              OUTCMD ('Z');
              INSIO (BYTE);
           UNTIL BYTE = 'R';
   OUTCMD ('Z');
   WRITELN ('MCPU Ready...');
   WRITELN;

END;   (* procedure INIT_MCPU *)

(* ASSIGN AXES assigns the logical ANIMAL axes to the physical MCPU axes. *)

PROCEDURE ASSIGN_AXES;

BEGIN

   AA[EE].M.MOTORNO := 11;
   AA[VV].M.MOTORNO := 12;

   AA[XX].M.MOTORNO := 1;
   AA[YY].M.MOTORNO := 3;
   AA[ZZ].M.MOTORNO := 5;
   AA[FF].M.MOTORNO := 7;
   AA[RR].M.MOTORNO := 9;

   AA[UU].M.MOTORNO := 2;
   AA[LL].M.MOTORNO := 4;
   AA[PP].M.MOTORNO := 6;

END;   (* procedure ASSIGN AXES *)

(* NAME AXES names the ANIMAL axes with unique 2-letter ID labels. *)

PROCEDURE NAME_AXES;

BEGIN

   AA[XX].ID := 'XX';
   AA[YY].ID := 'YY';
   AA[ZZ].ID := 'ZZ';
   AA[FF].ID := 'FF';
   AA[RR].ID := 'RR';
   AA[UU].ID := 'UU';
   AA[LL].ID := 'LL';
   AA[PP].ID := 'PP';
   AA[EE].ID := 'EE';
   AA[VV].ID := 'VV';

END;

(* INITIALIZE QUICK assigns constant speeds to all motors (for starters).*)

PROCEDURE INIT_QUICK (VAR A : AXIS_TABLE);

BEGIN

   A.R.ACCEL := FALSE;
   A.R.MAX_SPEED := 250;
   A.R.MIN_LOWSPD  := 250;
   A.R.MAX_HIGHSPD := 250;
   A.R.MAX_RAMPCNT := 1;

END;

(* INITIALIZE MOTOR transfers the running speed profiles to the motors.*)
{
PROCEDURE INIT_MOTOR (VAR A : AXIS_TABLE);

BEGIN

   A.M.ACCELST := A.R.ACCEL;
   A.M.SPEED   := A.R.MAX_SPEED;
   A.M.LOWSPD  := A.R.MIN_LOWSPD;
   A.M.HIGHSPD := A.R.MAX_HIGHSPD;
   A.M.RAMPCNT := A.R.MAX_RAMPCNT;
   A.M.RAMPK   := 0;

END;
}
(* INITIALIZE HOME sets the Home parameters (for starters).*)

PROCEDURE INIT_HOME (VAR A : AXIS_TABLE);

BEGIN

   A.H.DIR := REV;
   A.H.COUNT := 0;

END;

(* INITIALIZE STEP checks if an ANIMAL axis exists in the MCPU environment. *)

PROCEDURE INIT_STEP (VAR A : AXIS_TABLE);

BEGIN

   GETSTAT (A.C);
   IF A.C.ERROR
      THEN WRITELN ('ERROR on ANIMAL Axis ', A.ID, ' = MCPU Axis # ', A.C.AXISNO);

END;

(* INITIALIZE STEP STATUS pre-checks all ANIMAL MCPU axes
(* so as to get the MCPU axis status bytes set properly. *)

PROCEDURE INIT_STEP_STAT;

BEGIN

   WRITELN ('Testing ANIMAL''s MCPU Axes...');

   FOR I := 1 TO MAX_AXES DO
       INIT_STEP (AA [I]);

   WRITELN ('All MCPU Axes Tested');
   WRITELN;
   WAIT_A_SECOND;

END;

(* INITIALIZE ALL QUICK quickly initializes all ANIMAL axis speeds to
(* the same default values. *)

PROCEDURE INIT_ALL_QUICK;

BEGIN

   FOR I := 1 TO MAX_AXES DO
       INIT_QUICK (AA [I]);

END;

(* INITIALIZE ALL MOTOR transfers all optimum ANIMAL axis speeds
(* from the run profile records to the motor records. *)
{
PROCEDURE INIT_ALL_MOTOR;

BEGIN

   FOR I := 1 TO MAX_AXES DO
       INIT_MOTOR (AA [I]);

END;
}
(* DEFAULT SPEEDS attempts to load a default speed file from disk. *)

PROCEDURE DEFAULT_SPEEDS;

VAR SPEEDNAME : STRING [14];
    SPEEDFILE : FILE OF RUN_PROFILE;
    LOAD_OK : BOOLEAN;

BEGIN

   SPEEDNAME := 'ANIMAL.SPD';
   ASSIGN (SPEEDFILE, SPEEDNAME);
   {$I-}
   RESET (SPEEDFILE);
   {$I+}

   LOAD_OK := (IORESULT = 0);

   IF LOAD_OK
      THEN WRITELN ('Loading Data File ANIMAL.SPD for Default Speeds...')
      ELSE WRITELN ('Data File ANIMAL.SPD Not Found -- Preset Speeds Used');

   IF LOAD_OK
      THEN BEGIN
         {$I-}
           FOR I := 1 TO MAX_AXES DO
               READ (SPEEDFILE, AA[I].R);

           CLOSE (SPEEDFILE);
         {$I+}
           END;  (* IF loading ok *)

END;

(* DEFAULT UNITS attempts to load a default user units file from disk. *)

PROCEDURE DEFAULT_UNITS;

VAR UNITSNAME : STRING [14];
    UNITSFILE : FILE OF CONVERSION_TABLE;
    LOAD_OK : BOOLEAN;

BEGIN

   UNITSNAME := 'ANIMAL.UNT';
   ASSIGN (UNITSFILE, UNITSNAME);
   {$I-}
   RESET (UNITSFILE);
   {$I+}

   LOAD_OK := (IORESULT = 0);

   IF LOAD_OK
      THEN WRITELN ('Loading Data File ANIMAL.UNT for Default Units...')
      ELSE WRITELN ('Data File ANIMAL.UNT Not Found -- Preset Units Used');

   IF LOAD_OK
      THEN BEGIN
         {$I-}
           FOR I := 1 TO MAX_AXES DO
               READ (UNITSFILE, AA[I].K);

           CLOSE (UNITSFILE);
         {$I+}
           END;  (* IF loading ok *)

END;

(* INITIALIZE STUFF initializes all ANIMAL variables and stuff...*)

PROCEDURE INIT_STUFF;

BEGIN

FRAME_COUNT := 0;
EXPOSURE_TIME := STD_EXP_TIME;

EXPOSURE := FALSE;
FRAME_STEP := 1;
INCRCNT := 1;

TOTAL_COUNT := 0;
PRESET_COUNT := 0;

LAPSE_TIME := STD_LAPSE_TIME;
FRAME_TIME := STD_FRAME_TIME;
TOTAL_TIME := STD_FRAME_TIME;

SEQUENCE_TIME := 1.000;
MCPU_DELAY := 1000;
SEQUENCED := TRUE;
REMOTE := FALSE;
DISPLAY := TRUE;
REVERSE := FALSE;

STOPMOTION := FALSE;
LIVEACTION := FALSE;
GOMOTION := FALSE;

FADE := FALSE;
ADVANCEONLY := FALSE;
ROTOSCOPING := FALSE;

FOLLOW_FOCUS := FALSE;
FOCAL_LENGTH := 50.0;
FOCUS_REF := 1000.0;
ZERO_FOCUS := 52.786;

FOR I := 1 TO MAX_AXES DO
    AA [I].SPEC := FALSE;

FOR I := 1 TO MAX_AXES DO
    AA [I].C.AXISNO := AA [I].M.MOTORNO;

FOR I := 1 TO MAX_AXES DO
    AA [I].K.KSCALE := 1.0;

FOR I := 1 TO MAX_AXES DO
    AA [I].K.UNITS := 'Steps';

END;   (* procedure INIT STUFF *)

(* INIT LOAD initializes and loads all of the one-time ANIMAL info. *)

BEGIN   (* INIT LOAD *)

   INIT_MCPU;

   ASSIGN_AXES;

   NAME_AXES;

   PUT_AXIS_ARRAY;

   INIT_STUFF;

   INIT_STEP_STAT;

   INIT_ALL_QUICK;

   INIT_ALL_MOTOR;

   DEFAULT_SPEEDS;

   DEFAULT_UNITS;
   WRITELN;

   INIT_AXES;

END;

