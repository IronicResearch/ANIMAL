
(* SCALE_FACTORS; scales each of ANIMAL's MCPU axes with the user-specified
(* conversion factor and measurement units. *)

OVERLAY PROCEDURE SCALE_FACTORS;

VAR ANSWER : CHAR;
    SCALE_OK : BOOLEAN;
    SELECTION : CHAR;
    PRIMARY : BOOLEAN;

    ID : CHAR2;
    OK : BOOLEAN;
    AX : AXIS_TABLE;

(* SCALE displays the scale factor and units for each axis. *)

PROCEDURE SCALE (VAR A : AXIS_TABLE);

BEGIN

   WRITELN (A.ID:10, A.K.KSCALE:20:6, A.K.UNITS:20);

END;

(* RESCALE allows the user to re-enter a scale factor and own units. *)

PROCEDURE RESCALE (VAR A : AXIS_TABLE);

VAR ANSWER : CHAR;

BEGIN

WRITELN;
WRITELN (A.ID, ' Axis now has 1 step = ', A.K.KSCALE:6:6, ' ', A.K.UNITS);

REPEAT

   WRITELN;
   WRITE ('New ', A.ID, ' Axis Scale Conversion Factor = ');
   RDLNREAL (A.K.KSCALE);
   WRITE ('New ', A.ID, ' Axis Measurement Units = ');
   READLN (A.K.UNITS);
   WRITELN;

   IF ABS (A.K.KSCALE) <> 0.0
      THEN IF ABS (A.K.KSCALE) < 1.0E-5
           THEN A.K.DP := 6
      ELSE IF ABS (A.K.KSCALE) < 1.0E-4
           THEN A.K.DP := 5
      ELSE IF ABS (A.K.KSCALE) < 1.0E-3
           THEN A.K.DP := 4
      ELSE IF ABS (A.K.KSCALE) < 1.0E-2
           THEN A.K.DP := 3
      ELSE IF ABS (A.K.KSCALE) < 1.0E-1
           THEN A.K.DP := 2
      ELSE IF ABS (A.K.KSCALE) < 1.0E+1
           THEN A.K.DP := 1
           ELSE A.K.DP := 0;

   WRITELN (A.ID, ' Axis now has 1 step = ', A.K.KSCALE:6:6, ' ', A.K.UNITS);
   WRITELN;
   WRITE ('Correct? (Y/N) ');
   RDCON (ANSWER);
   WRITELN;

UNTIL ANSWER <> 'N';

END;

(* SAVE UNITS saves the user units onto disk. *)

PROCEDURE SAVE_UNITS;

VAR UNITSNAME : STRING [14];
    UNITSFILE : FILE OF CONVERSION_TABLE;

    NAME_OK : BOOLEAN;
    SAVE_OK : BOOLEAN;
    ANSWER : CHAR;

BEGIN

REPEAT

   WRITE ('Units File Name: ');
   READLN (UNITSNAME);
   WRITELN;

   WRITELN ('Proceeding to save file...');
   ASSIGN (UNITSFILE, UNITSNAME);
   {$I-}
   REWRITE (UNITSFILE);
   {$I+}

   IF IORESULT = 0
      THEN SAVE_OK := TRUE
      ELSE BEGIN
           SAVE_OK := FALSE;
           WRITE ('File Saving Error -- Try again? (Y/N) ');
           RDCON (ANSWER);
           WRITELN;
           WRITELN;
           IF ANSWER = 'Y'
              THEN NAME_OK := FALSE
              ELSE NAME_OK := TRUE;
           END;

UNTIL NAME_OK OR SAVE_OK;

IF SAVE_OK
   THEN BEGIN

   {$I-}
   FOR I := 1 TO MAX_AXES DO
       WRITE (UNITSFILE, AA[I].K);

   CLOSE (UNITSFILE);
   {$I+}
   WRITELN ('File saving completed');
   WRITELN;

   END;  (* IF File Saving ok *)

END;

(* LOAD UNITS loads the user units onto disk. *)

PROCEDURE LOAD_UNITS;

VAR UNITSNAME : STRING [14];
    UNITSFILE : FILE OF CONVERSION_TABLE;

    NAME_OK : BOOLEAN;
    LOAD_OK : BOOLEAN;
    ANSWER : CHAR;

BEGIN

REPEAT

   WRITE ('Units File Name: ');
   READLN (UNITSNAME);
   WRITELN;

   WRITELN ('Proceeding to load file...');
   ASSIGN (UNITSFILE, UNITSNAME);
   {$I-}
   RESET (UNITSFILE);
   {$I+}

   IF IORESULT = 0
      THEN LOAD_OK := TRUE
      ELSE BEGIN
           LOAD_OK := FALSE;
           WRITE ('File Not Found -- Try again? (Y/N) ');
           RDCON (ANSWER);
           WRITELN;
           WRITELN;
           IF ANSWER = 'Y'
              THEN NAME_OK := FALSE
              ELSE NAME_OK := TRUE;
           END;

UNTIL NAME_OK OR LOAD_OK;

IF LOAD_OK
   THEN BEGIN

   {$I-}
   FOR I := 1 TO MAX_AXES DO
       READ (UNITSFILE, AA[I].K);

   CLOSE (UNITSFILE);
   {$I+}
   WRITELN ('File loading completed');
   WRITELN;

   END;  (* IF loading ok *)

END;

BEGIN   (* SCALE FACTORS *)

PRIMARY := TRUE;

SCALE_OK := FALSE;

REPEAT

   CLRSCRN;

   WRITELN ('AXIS':10, 'SCALE FACTOR':20, 'USER UNITS':20);
   WRITELN;

   FOR I := 1 TO MAX_AXES DO
       SCALE (AA[I]);

   WRITELN;
   WRITELN ('User Units Conversion Selections:');
   WRITELN;
   WRITELN ('   M : Modify existing Units');
   WRITELN ('   S : Save User Units onto Disk File');
   WRITELN ('   L : Load User Units from Disk File');
   WRITELN ('   F : File Directory Listing of Disk');
   WRITELN ('   1 : Primary Axis Units on Display');
   WRITELN ('   2 : Secondary Axis Units on Display');
   WRITELN ('   Q : Quit Conversion Selections');
   WRITELN;

   RDCON (SELECTION);
   CASE SELECTION OF

        'M' : BEGIN
              WRITE ('odify ');
              WRITE ('which axis? ');
              RDCON (ID [1]);
              RDCON (ID [2]);
              WRITELN;
              CASE_AXIS (ID, OK, AX);
              IF OK THEN RESCALE (AX);
              SWAP_AXIS_BACK (ID, AX);
              END;

        'S' : BEGIN
              WRITELN ('ave Units File');
              WRITELN;
              SAVE_UNITS;
              END;

        'L' : BEGIN
              WRITELN ('oad Units File');
              WRITELN;
              LOAD_UNITS;
              END;

        'F' : BEGIN
              WRITELN ('ile Directory Listing...');
              WRITELN;
              FILE_DIRECTORY;
              WRITE ('Press any Key to Proceed > ');
              RDKEY (ANSWER);
              WRITELN;
              END;

        '1' : PRIMARY := TRUE;

        '2' : PRIMARY := FALSE;

        'Q' : BEGIN
              WRITE ('uit Units Conversion...for sure? (Y/N) ');
              RDCON (ANSWER);
              IF ANSWER = 'Y'
                 THEN SCALE_OK := TRUE;
              END;

        END;

UNTIL SCALE_OK;

END;   (* SCALE FACTORS *)
