
(* Overide operations for direct MCPU control. *)

OVERLAY PROCEDURE OVERIDE;

(* GO CAMERA runs Camera directly in the overide mode. *)

PROCEDURE GO_CAMERA;

VAR CH : CHAR;
    ANSWER : CHAR;
    SELECTION : BOOLEAN;
    CAMERA_COUNT : INTEGER;
    ADVANCE_COUNT : INTEGER;
    FADE_COUNT : INTEGER;

PROCEDURE CAMERA_MENU;

BEGIN

   WRITELN ('Selection Menu:');
   WRITELN;
   WRITELN ('   C : Camera Exposure Count ');
   WRITELN ('   E : Exposure Time Interval');
   WRITELN ('   A : Advance Only Frame Count');
   WRITELN ('   S : Shutter Open/Closed');
   WRITELN ('   F : Fade In/Out Frame Count');
   WRITELN ('   Q : Quit Camera Selections');
   WRITELN;

END;

BEGIN

   CAMERA_MENU;

   SELECTION := FALSE;

   REPEAT

      RDCON (CH);

      CASE CH OF

           'C' : BEGIN
                 WRITE ('amera Count = ');
                 RDLNINT (CAMERA_COUNT);

                 IF CAMERA_COUNT < 0
                    THEN AA[EE].M.DIR := REV
                    ELSE AA[EE].M.DIR := FWD;
                 AA[EE].M.STEPCNT := ABS (CAMERA_COUNT);
                 RUNM (AA[EE].M);
                 TOTAL_COUNT := TOTAL_COUNT + CAMERA_COUNT;
                 END;

           'E' : BEGIN
                 WRITE ('xposure Time = ');
                 RDLNREAL (EXPOSURE_TIME);

                 AA[EE].M.SPEED := ROUND (EXPOSURE_TIME * 100);
                 AA[EE].M.ACCELST := FALSE;
                 INITM (AA[EE].M);
                 END;

           'A' : BEGIN
                 WRITE ('dvance Count = ');
                 RDLNINT (ADVANCE_COUNT);

                 IF ADVANCE_COUNT < 0
                    THEN AA[EE].M.DIR := REV
                    ELSE AA[EE].M.DIR := FWD;
                 AA[EE].M.STEPCNT := ABS (ADVANCE_COUNT);
                 RUNM (AA[EE].M);
                 TOTAL_COUNT := TOTAL_COUNT + ADVANCE_COUNT;
                 END;

           'S' : BEGIN
                 WRITE ('hutter...');
                 HOMEM (AA[EE].M);
                 ROTOSCOPING := NOT ROTOSCOPING;
                 IF ROTOSCOPING
                    THEN WRITELN ('Open')
                    ELSE WRITELN ('Closed');
                 END;

           'F' : BEGIN
                 WRITE ('ade Count = ');
                 RDLNINT (FADE_COUNT);

                 WRITE ('Fade In or Out? (I/O) ');
                 RDCON (ANSWER);
                 WRITELN;
                 IF ANSWER = 'I'
                    THEN AA[EE].M.LOWSPD := 0
                    ELSE AA[EE].M.LOWSPD := -1;

                 WRITE ('Linear or Logarithmic? (L/G) ');
                 RDCON (ANSWER);
                 WRITELN;
                 WRITELN;
                 IF ANSWER = 'L'
                    THEN AA[EE].M.HIGHSPD := 0
                    ELSE AA[EE].M.HIGHSPD := -1;

                 AA[EE].M.RAMPCNT := ABS (FADE_COUNT);
                 AA[EE].M.ACCELST := TRUE;
                 INITM (AA[EE].M);
                 WAITOVER;
                 IF FADE_COUNT < 0
                    THEN AA[EE].M.DIR := REV
                    ELSE AA[EE].M.DIR := FWD;
                 AA[EE].M.STEPCNT := ABS (FADE_COUNT);
                 RUNM (AA[EE].M);
                 AA[EE].M.ACCELST := FALSE;
                 TOTAL_COUNT := TOTAL_COUNT + FADE_COUNT;
                 END;

           'H' : BEGIN
                 WRITELN ('elp...');
                 WRITELN;
                 WRITE ('Camera ');
                 CAMERA_MENU;
                 END;

           '?' : BEGIN
                 WRITELN (' -- Help...');
                 WRITELN;
                 WRITE ('Camera ');
                 CAMERA_MENU;
                 END;

           'Q' : BEGIN
                 WRITELN ('uit Camera Selections');
                 WRITELN;
                 SELECTION := TRUE;
                 END;

           ^M :  BEGIN
                 WRITELN ('Quit Camera Selections');
                 WRITELN;
                 SELECTION := TRUE;
                 END;

           ELSE  WRITELN;

           END; (* CASE selection *)

   UNTIL SELECTION;

END;    (* procedure GO_CAMERA *)

(* GO INITIALIZE initializes a selected MCPU axis.*)

PROCEDURE GO_INIT_MOTOR (VAR M : AXIS);

VAR ANSWER : CHAR;

BEGIN

   WRITE ('Acceleration? (Y/N) ');
   RDCON (ANSWER);
   WRITELN;

   IF ANSWER <> 'Y'
      THEN BEGIN
           M.ACCELST := FALSE;
           WRITE ('Constant Speed = ');
           RDLNINT (M.SPEED);
           END   (* IF constant *)

      ELSE BEGIN
           M.ACCELST := TRUE;
           WRITE ('Low Speed = ');
           RDLNINT (M.LOWSPD);
           WRITE ('High Speed = ');
           RDLNINT (M.HIGHSPD);
           WRITE ('Ramp Count = ');
           RDLNINT (M.RAMPCNT);
           M.RAMPK := 0;
           END;  (* IF acceleration *)

   INITM (M);
   WRITELN;

END;

(* GO RUN runs a selected MCPU axis (step count only).*)

PROCEDURE GO_RUN_MOTOR (VAR M : AXIS);

BEGIN

   WRITE (' Step Count = ');
   RDLNREAL (M.STEPCNT);
   PREPM (M);
   RUNM (M);

END;

(* GO TO POSITION goes to a selected MCPU axis position (step count only).*)

PROCEDURE GOTO_POSITION (VAR A : AXIS_TABLE);

VAR DESTN : REAL;

BEGIN

   WRITE (' Position = ');
   RDLNREAL (DESTN);
   GETCOUNT (A.C);
   A.M.STEPCNT := DESTN - A.C.COUNT;
   PREPM (A.M);
   RUNM (A.M);

END;

(* GO LIMIT MOTOR runs a selected MCPU motor into a limit switch.*)

PROCEDURE GO_LIMIT_MOTOR (VAR M : AXIS);

VAR CH : CHAR;

BEGIN

   WRITE (' Direction? (F/R) ');
   RDCON (CH);
   WRITELN;
   IF CH = 'R'
      THEN M.DIR := REV
      ELSE M.DIR := FWD;
   HOMEM (M);

END;

(* GO UN-LIMIT MOTOR reverses a selected motor out of a limit switch.*)

PROCEDURE GO_UNLIMIT_MOTOR (VAR M : AXIS);

VAR CH : CHAR;
    I : INTEGER;

BEGIN

   WRITE ( ' Direction? (F/R) ');
   RDCON (CH);
   WRITELN;
   IF CH = 'R'
      THEN M.DIR := REV
      ELSE M.DIR := FWD;

   FOR I := 1 TO 10 DO
       BEGIN
       PULSEM (M);
       DELAY (100);
       END;

END;

(* NO LIMIT turns off the axis' switch mask for un-interrupted operation.*)

PROCEDURE NOLIMITM (VAR M : AXIS);

VAR BYTE : CHAR;
    MOTORNO : CHAR;
    SPEED : CHAR;

BEGIN

   REPEAT
      INSIO (BYTE);
   UNTIL BYTE = 'R';     (* Ready ? *)

   OUTCMD ('W');         (* Wake Up *)

   OUTCMD ('D');         (* Drive *)

   OUTCMD ('M');         (* Motor # *)
   MOTORNO := CHR (M.MOTORNO);
   OUTSIO (MOTORNO);

   OUTCMD ('H');         (* Home *)

   OUTCMD ('V');         (* Velocity *)
   SPEED := CHR (0);     (* 0 --> Mask Off *)
   OUTSIO (SPEED);
   OUTSIO (SPEED);

   OUTCMD ('O');         (* Overhear *)

   OUTCMD ('Z');         (* Zzzzz *)

END;

(* NO LIMIT turns off the axis' switch mask for un-interrupted operation.*)
(* Includes INITM for re-initializing motor speed when through. *)

PROCEDURE NO_LIMIT_MOTOR (VAR M : AXIS);

BEGIN

   NOLIMITM (M);         (* No Limit switch *)
   WAITBACK;

   INITM (M);            (* Re-Init speed *)

END;

(* KILL EM ALL kills any and all MCPU motor axes, running or not. *)

PROCEDURE KILL_EM_ALL;

VAR BYTE : CHAR;

BEGIN

   REPEAT
      INSIO (BYTE);
   UNTIL BYTE = 'R';              (* Ready ? *)

   OUTCMD ('W');                  (* Wake Up *)

   FOR I := 1 TO MAX_AXES DO
       KILLX (AA [I].M);            (* Kill block *)

   OUTCMD ('Z');                  (* Zzzzz *)

END;

(* ZERO EM ALL zeroes all MCPU step positions. *)

PROCEDURE ZERO_EM_ALL;

VAR BYTE : CHAR;

BEGIN

   REPEAT
      INSIO (BYTE);
   UNTIL BYTE = 'R';              (* Ready ? *)

   OUTCMD ('W');                  (* Wake Up *)

   FOR I := 1 TO MAX_AXES DO
       ZEROX (AA [I].M);            (* Zero block *)

   OUTCMD ('Z');                  (* Zzzzz *)

END;

(* CHECK STATUS gets the motion status for an MCPU axis. *)

PROCEDURE CHECK_STATUS (VAR C : COUNT_TABLE);

BEGIN

   GETSTAT (C);
   WRITE (' = ');
   WRITE (C.STAT);
   CASE C.STAT OF
        'D' : WRITE ('...Drive Done');
        'M' : WRITE ('...Motor Moving');
        'S' : WRITE ('...Switch Stop');
        'E' : WRITE ('...Existance Error');
        'R' : WRITE ('...(Ready MCPU -- try again)');
        'N' : WRITE ('...(Not Ready MCPU -- try again)');
        ELSE  WRITE ('...???');
        END;  (* CASE axis status *)
   WRITELN;

END;

(* FULL STATUS fetches all the current info for all MCPU axes. *)

PROCEDURE FULL_STATUS;

VAR BYTE : CHAR;

BEGIN

   REPEAT
      INSIO (BYTE);
   UNTIL BYTE = 'R';     (* Ready ? *)

   OUTCMD ('W');         (* Wake Up *)

   FOR I := 1 TO MAX_AXES DO
       STATX (AA [I].C);         (* Status ? *)

   OUTCMD ('Z');         (* Zzzzz *)

END;

(* DISPLAY_MENU displays the MCPU menu for the manual overide program. *)

PROCEDURE DISPLAY_MENU;

BEGIN

WRITELN ('ANIMAL Axis MCPU Overide Selections:');
WRITELN;
WRITELN ('   R : Run a motor axis           |   L : Limit switch position');
WRITELN ('   K : Kill motor motion          |   U : Un-limit switch position');
WRITELN ('   J : Jog pair of motor axes     |   N : No limit switches active');
WRITELN;
WRITELN ('   T : Table for all motor axes   |   I : Initialize default speeds');
WRITELN ('   S : Status running report      |   M : Modify motor speeds');
WRITELN ('   P : Position step count report |   Z : Zero position step count');
WRITELN;
WRITELN ('   G : Goto axis position         |   H : Help -- Display this menu');
WRITELN ('   C : Camera functions           |   Q : Quit Overide mode program');
WRITELN;

END;  (* procedure DISPLAY_MENU *)

(* TABLE AXES displays the table of MCPU axes available to ANIMAL.*)

PROCEDURE TABLE_AXES;

BEGIN

GET_AXIS_ARRAY;

WRITE   ('AXIS #   DESCRIPTION  ', 'POSITION':8, 'STAT':5, '   |   ');
WRITELN ('AXIS #   DESCRIPTION  ', 'POSITION':8, 'STAT':5);
WRITELN;
WRITE   ('X  #  1 : Pan        :', AA[XX].C.COUNT:8:0, AA[XX].C.STAT:5, '   |   ');
WRITELN ('F  #  7 : F Focus    :', AA[FF].C.COUNT:8:0, AA[FF].C.STAT:5);
WRITE   ('Y  #  3 : Tilt       :', AA[YY].C.COUNT:8:0, AA[YY].C.STAT:5, '   |   ');
WRITELN ('U  #  2 : Upper Pegs :', AA[UU].C.COUNT:8:0, AA[UU].C.STAT:5);
WRITE   ('Z  #  5 : Zoom       :', AA[ZZ].C.COUNT:8:0, AA[ZZ].C.STAT:5, '   |   ');
WRITELN ('L  #  4 : Lower Pegs :', AA[LL].C.COUNT:8:0, AA[LL].C.STAT:5);
WRITE   ('R  #  9 : Rotate     :', AA[RR].C.COUNT:8:0, AA[RR].C.STAT:5, '   |   ');
WRITELN ('P  #  6 : Platen     :', AA[PP].C.COUNT:8:0, AA[PP].C.STAT:5);

WRITELN;
WRITELN;

END;

(* OVERIDE allows the user to overide the MCPU axes outside of the regular
(* ANIMAL program sequences. *)

VAR CH : CHAR;
    ANSWER : CHAR;
    QUITTING_TIME : BOOLEAN;

    A : AXIS_TABLE;
    XAXISNO : CHAR;
    YAXISNO : CHAR;

    ID : CHAR2;
    OK : BOOLEAN;
    AX : AXIS_TABLE;

BEGIN

   FULL_STATUS;

   TABLE_AXES;

   DISPLAY_MENU;

   QUITTING_TIME := FALSE;

   REPEAT

      RDCON (CH);

      CASE CH OF

           'K' : BEGIN
                 WRITE ('ill which Axis? ');
                 RDCON (ID [1]);
                 RDCON (ID [2]);
                 WRITELN;
                 CASE_AXIS (ID, OK, AX);
                 IF OK
                    THEN STOPM (AX.M)
                    ELSE IF ID = 'AA'
                            THEN KILL_EM_ALL;
                 END;  (* Kill *)

           'R' : BEGIN
                 WRITE ('un which Axis? ');
                 RDCON (ID [1]);
                 RDCON (ID [2]);
                 CASE_AXIS (ID, OK, AX);
                 IF OK
                    THEN GO_RUN_MOTOR (AX.M)
                    ELSE WRITELN;
                 SWAP_AXIS_BACK (ID, AX);
                 END;  (* Run *)

           'G' : BEGIN
                 WRITE ('oto which Axis? ');
                 RDCON (ID [1]);
                 RDCON (ID [2]);
                 CASE_AXIS (ID, OK, AX);
                 IF OK
                    THEN GOTO_POSITION (AX)
                    ELSE WRITELN;
                 SWAP_AXIS_BACK (ID, AX);
                 END;  (* Goto *)

           'M' : BEGIN
                 WRITE ('odify which Axis? ');
                 RDCON (ID [1]);
                 RDCON (ID [2]);
                 WRITELN;
                 CASE_AXIS (ID, OK, AX);
                 IF OK THEN GO_INIT_MOTOR (AX.M);
                 SWAP_AXIS_BACK (ID, AX);
                 END;  (* Modify *)

           'I' : BEGIN
                 WRITELN ('nitializing Default Speeds...');
                 INIT_AXES;
                 END;  (* Initialize *)

           'C' : BEGIN
                 WRITE ('amera...');
                 GO_CAMERA;
                 END;  (* Camera *)

           'L' : BEGIN
                 WRITE ('imit which Axis? ');
                 RDCON (ID [1]);
                 RDCON (ID [2]);
                 CASE_AXIS (ID, OK, AX);
                 IF OK
                    THEN GO_LIMIT_MOTOR (AX.M)
                    ELSE WRITELN;
                 SWAP_AXIS_BACK (ID, AX);
                 END;  (* Limit *)

           'U' : BEGIN
                 WRITE ('n-Limit which Axis? ');
                 RDCON (ID [1]);
                 RDCON (ID [2]);
                 CASE_AXIS (ID, OK, AX);
                 IF OK
                    THEN GO_UNLIMIT_MOTOR (AX.M)
                    ELSE WRITELN;
                 SWAP_AXIS_BACK (ID, AX);
                 END;  (* Un-limit *)

           'N' : BEGIN
                 WRITE ('o Limit which Axis? ');
                 RDCON (ID [1]);
                 RDCON (ID [2]);
                 WRITELN;
                 CASE_AXIS (ID, OK, AX);
                 IF OK THEN NO_LIMIT_MOTOR (AX.M);
                 SWAP_AXIS_BACK (ID, AX);
                 END;  (* No limit *)

           'Z' : BEGIN
                 WRITE ('ero which Axis? ');
                 RDCON (ID [1]);
                 RDCON (ID [2]);
                 WRITELN;
                 CASE_AXIS (ID, OK, AX);
                 IF OK
                    THEN ZEROM (AX.M)
                    ELSE IF ID = 'AA'
                            THEN ZERO_EM_ALL;
                 END;  (* Zero *)

           '0' : BEGIN
                 WRITE (' -- Zero which Axis? ');
                 RDCON (ID [1]);
                 RDCON (ID [2]);
                 WRITELN;
                 CASE_AXIS (ID, OK, AX);
                 IF OK
                    THEN ZEROM (AX.M)
                    ELSE IF ID = 'AA'
                            THEN ZERO_EM_ALL;
                 END;  (* Zero *)

           'P' : BEGIN
                 WRITE ('osition for which Axis? ');
                 RDCON (ID [1]);
                 RDCON (ID [2]);
                 CASE_AXIS (ID, OK, AX);
                 IF OK
                    THEN BEGIN
                         GETCOUNT (AX.C);
                         WRITELN (' = ', AX.C.COUNT:8:0);
                         SWAP_AXIS_BACK (ID, AX);
                         END
                    ELSE WRITELN;
                 END;  (* Position *)

           'S' : BEGIN
                 WRITE ('tatus for which Axis? ');
                 RDCON (ID [1]);
                 RDCON (ID [2]);
                 CASE_AXIS (ID, OK, AX);
                 IF OK
                    THEN CHECK_STATUS (AX.C)
                    ELSE WRITELN;
                 SWAP_AXIS_BACK (ID, AX);
                 END;  (* Status *)

           'J' : BEGIN
                 WRITELN ('og Axes with CRT terminal arrow keys...');
                 WRITELN;

                 WRITE ('Use Left/Right Arrow Keys for which Axis? ');
                 RDCON (ID [1]);
                 RDCON (ID [2]);
                 WRITELN;
                 CASE_AXIS (ID, OK, AX);
                 IF OK THEN XAXISNO := CHR (AX.M.MOTORNO)
                       ELSE XAXISNO := CHR (AA[XX].M.MOTORNO);

                 WRITE ('Use  Up/Down  Arrow Keys for which Axis?  ');
                 RDCON (ID [1]);
                 RDCON (ID [2]);
                 WRITELN;
                 CASE_AXIS (ID, OK, AX);
                 IF OK THEN YAXISNO := CHR (AX.M.MOTORNO)
                       ELSE YAXISNO := CHR (AA[YY].M.MOTORNO);

                 WRITELN;
                 WRITELN ('Press RETURN when through jogging');
                 OVERUN (XAXISNO, YAXISNO);
                 WRITELN;
                 END;  (* Jogging arrow keys *)

           'H' : BEGIN
                 WRITELN ('elp...');
                 WRITELN;
                 DISPLAY_MENU;
                 END;  (* Help *)

           '?' : BEGIN
                 WRITELN (' -- Help...');
                 WRITELN;
                 DISPLAY_MENU;
                 END;  (* Help *)

           'T' : BEGIN
                 WRITELN ('able of MCPU Axes:');
                 WRITELN;
                 FULL_STATUS;
                 TABLE_AXES;
                 END;  (* Table of axes *)

           'Q' : BEGIN
                 WRITE ('uit Overide...for sure? (Y/N) ');
                 RDCON (ANSWER);
                 WRITELN;
                 IF ANSWER = 'Y'
                    THEN QUITTING_TIME := TRUE;
                 END;  (* CASE Quit *)

           ELSE  WRITELN;

           END; (* CASE selection *)

   UNTIL QUITTING_TIME;

END;  (* procedure OVERIDE *)
