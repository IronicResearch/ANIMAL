(* MCPU Communications routines. *)(* MCPU = Compumotor 1200/2100 series motion control system. *)(* OUTPUT COMMAND outputs an ASCII character command to the MCPU. *)(* Note: OUTCMD passes by value, whereas OUTSIO passes by reference. *)PROCEDURE OUTCMD (BYTE : CHAR);BEGIN   OUTSIO (BYTE);END;(* OUTSTR outputs a string of ASCII characters to the MCPU. *)PROCEDURE OUTSTR (VAR S : STRING);VAR C : INTEGER;BEGIN   FOR C := 1 TO LENGTH (S) DO       OUTSIO (S [C]);END;(* TIME-OUT MCPU times out the MCPU's response to the serial input port. *)PROCEDURE TIMEOUT_MCPU (VAR STATUS : BOOLEAN);CONST TIME = 1;                         (* 1 millisecond *)      TIMEOUT = 1000;                   (* 1000 milliseconds *)VAR T : INTEGER;BEGIN   T := 0;   REPEAT      INSIOST (STATUS);      T := T + TIME;      IF NOT STATUS         THEN DELAY (TIME);   UNTIL (STATUS) OR (T >= TIMEOUT);   if (T >= TIMEOUT)      then Inc(COM_Timeouts);END;(* RESET MCPU resets the MCPU Compumotor controller hardware. *)PROCEDURE RESET_MCPU;BEGIN   OUTCMD (' ');                        (* attention *)   OUTCMD (' ');   OUTCMD (' ');   OUTCMD ('Z');                        (* Software Reset *)   OUTCMD (' ');END;(* READY MCPU loops until the MCPU is ready for command input. *)PROCEDURE READYMCPU;BEGIN   OUTCMD (' ');   OUTCMD ('E');                        (* Enable *)   OUTCMD (' ');END;(* SYNC MCPU synchronizes MCPU communications to be ready for a command. *)PROCEDURE SYNC_MCPU;BEGIN   OUTCMD (' ');   OUTCMD (' ');   OUTCMD (' ');   OUTCMD ('E');                        (* Enable *)   OUTCMD (' ');END;(* RE-SYNC MCPU re-syncronizes MCPU communications for an existing command. *)PROCEDURE RESYNC_MCPU;BEGIN   OUTCMD (' ');   OUTCMD (' ');   OUTCMD (' ');   OUTCMD ('E');                        (* Enable *)   OUTCMD (' ');   OUTCMD ('M');                        (* Mode *)   OUTCMD ('N');                        (* Normal *)   OUTCMD (' ');END;(* IDLE MCPU synchronizes MCPU communications into idle. *)PROCEDURE IDLE_MCPU;BEGIN   OUTCMD (' ');                        (* Space *)END;(* NULL MCPU nullifies MCPU communications into idle. *)PROCEDURE NULL_MCPU;BEGIN   OUTCMD (' ');                        (* Space *)END;(* OVERHEAR commands the MCPU to not respond again until all axes are over. *)PROCEDURE OVERHEAR;BEGINEND;(* PREPM prepares the step count and direction for an MCPU motor. *)PROCEDURE PREPM (VAR M : MOTOR_TABLE);BEGIN   IF M.STEPCNT < 0.0      THEN M.DIR := REV      ELSE M.DIR := FWD;   M.STEPCNT := ABS (M.STEPCNT);END;(* INTBYTE converts a 16-bit Pascal integer into its corresponding(* 2 8-bit bytes for output to the serial interface. *)PROCEDURE INTBYTE;BEGINEND;(* BYTEINT converts 2 8-bit bytes back into a 16-bit Pascal integer(* for input from the serial interface. *)PROCEDURE BYTEINT;BEGINEND;(* REALBYTE converts a 24-bit Pascal real into its corresponding(* 3 8-bit bytes for output to the serial interface. *)PROCEDURE REALBYTE;BEGINEND;(* BYTEREAL converts 3 8-bit bytes back into a 24-bit Pascal real(* for input from the serial interface. *)PROCEDURE BYTEREAL;BEGINEND;(* INTSTR converts an integer number into a numeral string. *)(* For output to Compumotor 1200 controller via serial interface. *)PROCEDURE INTSTR (VAR INTVAL : INTEGER; VAR BYTESTR : STRING);VAR S, Z : INTEGER;BEGIN   STR (INTVAL:5, BYTESTR);   Z := 0;   FOR S := 1 TO 5 DO       IF BYTESTR [S] = ' '          THEN Z := SUCC (Z);   DELETE (BYTESTR, 1, Z);   IF LENGTH (BYTESTR) <= 0      THEN BYTESTR := '0';END;(* STRINT converts a numeral string into an integer number. *)(* For input from Compumotor 1200 controller via serial interface. *)PROCEDURE STRINT (VAR BYTESTR : STRING; VAR INTVAL : INTEGER);VAR CODE : INTEGER;    SIGN : INTEGER;BEGIN   IF BYTESTR [1] = '-'      THEN SIGN := -1      ELSE SIGN := 1;   DELETE (BYTESTR, 1, 1);   VAL (BYTESTR, INTVAL, CODE);   IF CODE <> 0      THEN INTVAL := 0;   INTVAL := SIGN * INTVAL;END;(* REALSTR converts a real number into a numeral string. *)(* For output to Compumotor 1200 controller via serial interface. *)PROCEDURE REALSTR (VAR REALVAL : REAL; VAR BYTESTR : STRING);VAR S, Z : INTEGER;BEGIN   STR (REALVAL:10:5, BYTESTR);   Z := 0;   FOR S := 1 TO 10 DO       IF BYTESTR [S] = ' '          THEN Z := SUCC (Z);   DELETE (BYTESTR, 1, Z);   IF LENGTH (BYTESTR) <= 0      THEN BYTESTR := '0.0';END;(* STREAL converts a numeral string into a real number. *)(* For input from Compumotor 1200 controller via serial interface. *)PROCEDURE STREAL (VAR BYTESTR : STRING; VAR REALVAL : REAL);VAR CODE : INTEGER;    SIGN : REAL;BEGIN   IF BYTESTR [1] = '-'      THEN SIGN := -1.0      ELSE SIGN := 1.0;   DELETE (BYTESTR, 1, 1);   VAL (BYTESTR, REALVAL, CODE);   IF CODE <> 0      THEN REALVAL := 0.0;   REALVAL := SIGN * REALVAL;END;(* INITIALIZE MCPU finds out if the MCPU is ready for communications(* with the host desktop computer. *)PROCEDURE INIT_MCPU;VAR CH : CHAR;    SIOST : BOOLEAN;BEGIN   Reset_Mcpu;                          (* reset MCPU (2100) *)   REPEAT      RESYNC_MCPU;                      (* re-enable MCPU output *)      TIMEOUT_MCPU (SIOST);             (* time-out MCPU input *)      IF NOT SIOST         THEN BEGIN              WRITELN ('MCPU Not Ready Yet');              WRITELN ('--Either Reset MCPU Hardware');              WRITELN ('--Or Ignore MCPU Software (ESCAPE)');              WRITE   ('--Or Abort Program Here (CONTROL-C) > ');              RDCON (CH);              WRITELN;              WRITELN;              IF CH = ^C                 THEN HALT;              Reset_Mcpu;               (* reset for sure *)              END;   UNTIL SIOST OR (CH = ^[);   if (SIOST)      then WRITELN ('MCPU Ready...'^J)      else WRITELN ('MCPU Not Connected'^J);   if (NOT SIOST)      then MCPU_Installed := FALSE;END;