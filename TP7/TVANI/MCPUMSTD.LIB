(* MCPU Serial Command Sequences for communications between(* the system's desktop computer and the Motion Control Processor Unit. *)(* MCPU = DM STD bus motion control system. *)(* Includes expanded 24-bit step count processing. *)(* Compatible with original 16-bit step count processing. *)(* 'DRIVE_MOTOR' drives the step count, step rate, and direction(* for a specified MCPU motor. *)PROCEDURE DRIVEM (VAR M : MOTOR_TABLE);BEGIN   READYMCPU;                 (* Ready? *)   OUTCMD ('W');              (* Wake up... *)   DRIVEX (M);                (* Drive motor *)   OUTCMD ('Z');              (* Zzzzz *)END;(* 'INITIALIZE_MOTOR' initializes the specified motor for(* either constant speed or ramping speed operation. *)(* Subsequent 'RUN_MOTOR' sequences would run the motor(* at this particular set of speed characteristics. *)PROCEDURE INITM (VAR M : MOTOR_TABLE);BEGIN   READYMCPU;                (* Ready? *)   OUTCMD ('W');             (* Wake up... *)   INITX (M);                (* Initialize motor *)   OUTCMD ('Z');             (* Zzzzz *)END;(* 'RUN_MOTOR' runs the step count and direction only for an MCPU motor. *)PROCEDURE RUNM (VAR M : MOTOR_TABLE);BEGIN   READYMCPU;                (* Ready? *)   OUTCMD ('W');             (* Wake up... *)   RUNX (M);                 (* Drive motor *)   OUTCMD ('Z');             (* Zzzzz *)END;(* 'KILL_MOTOR' stops an MCPU motor in mid flight. *)PROCEDURE KILLM (VAR M : MOTOR_TABLE);BEGIN   READYMCPU;                (* Ready? *)   OUTCMD ('W');             (* Wake up *)   KILLX (M);                (* Kill motor *)   OUTCMD ('Z');             (* Zzzzz *)END;(* 'ZERO_MOTOR' zeroes out the cummulative step count for an MCPU axis. *)PROCEDURE ZEROM (VAR M : MOTOR_TABLE);BEGIN   READYMCPU;                (* Ready? *)   OUTCMD ('W');             (* Wake up *)   ZEROX (M);                (* Zero... *)   OUTCMD ('Z');             (* Zzzzz *)END;(* 'PULSE_MOTOR' pulses the specified motor 1 single step. *)PROCEDURE PULSEM (VAR M : MOTOR_TABLE);VAR MN : CHAR;BEGIN   READYMCPU;                 (* Ready? *)   OUTCMD ('W');              (* Wake up... *)   OUTCMD ('D');              (* Drive... *)   OUTCMD ('M');              (* Motor # *)   MN := CHR (M.MOTORNO);   OUTSIO (MN);   OUTCMD ('P');              (* Pulse single step *)   IF M.DIR = FWD      THEN OUTCMD ('F')       (* Forward *)      ELSE OUTCMD ('R');      (* Reverse *)   OUTCMD ('Z');              (* Zzzzz *)END;(* HOME_MOTOR homes the specified motor into its limit-switch position. *)(* Homing occurs at constant speed according to pre-loaded MCPU speeds. *)PROCEDURE HOMEM (VAR M : MOTOR_TABLE);VAR MN : CHAR;BEGIN   READYMCPU;                 (* Ready? *)   OUTCMD ('W');              (* Wake up... *)   OUTCMD ('D');              (* Drive... *)   OUTCMD ('M');              (* Motor # *)   MN := CHR (M.MOTORNO);   OUTSIO (MN);   OUTCMD ('H');              (* Home it home... *)   IF M.DIR = FWD      THEN OUTCMD ('F')       (* Forward *)      ELSE OUTCMD ('R');      (* Reverse *)   OUTCMD ('Z');              (* Zzzzz... *)END;(* NO LIMIT turns off the axis' switch mask for un-interrupted operation.*)PROCEDURE NOLIMITM (VAR M : MOTOR_TABLE);VAR MN : CHAR;    SPEED : CHAR;BEGIN   READYMCPU;                 (* Ready ? *)   OUTCMD ('W');              (* Wake Up *)   OUTCMD ('D');              (* Drive *)   OUTCMD ('M');              (* Motor # *)   MN := CHR (M.MOTORNO);   OUTSIO (MN);   OUTCMD ('H');              (* Home *)   OUTCMD ('V');              (* Velocity 0 --> Mask Off *)   SPEED := CHR (0);   OUTSIO (SPEED);   OUTSIO (SPEED);   OUTCMD ('Z');              (* Zzzzz *)END;(* GET_COUNT gets the current step count of an axis from the MCPU. *)PROCEDURE GETCOUNT (VAR M : MOTOR_TABLE);VAR MN : CHAR;    COUNT_L : CHAR;    COUNT_H : CHAR;    COUNT_X : CHAR;    COUNT : REAL;    SioStatus : boolean;BEGIN   if NOT MCPU_Installed      (* why bother ? *)      then Exit;   READYMCPU;                 (* Ready ? *)   OUTCMD ('W');              (* Wake-up *)   OUTCMD ('?');              (* Inquiry *)   OUTCMD ('M');              (* Motor # *)   MN := CHR (M.MOTORNO);   OUTSIO (MN);   OUTCMD ('L');              (* get Low byte *)   TimeOut_Mcpu (SioStatus);   if (SioStatus)      then INSIO (COUNT_L);   OUTCMD ('H');              (* get High byte *)   TimeOut_Mcpu (SioStatus);   if (SioStatus)      then INSIO (COUNT_H);   OUTCMD ('X');              (* get Extra byte *)   TimeOut_Mcpu (SioStatus);   if (SioStatus)      then INSIO (COUNT_X);   OUTCMD ('Z');              (* Zzzzz *)   BYTEREAL (COUNT_L, COUNT_H, COUNT_X, COUNT);   M.COUNT := COUNT;END;(* GET_STAT gets the current motion status of an MCPU axis. *)PROCEDURE GETSTAT (VAR M : MOTOR_TABLE);VAR MN : CHAR;    STAT : CHAR;    SioStatus : boolean;BEGIN   if NOT MCPU_Installed      (* why bother ? *)      then Exit;   READYMCPU;                 (* Ready ? *)   OUTCMD ('W');              (* Wake-up *)   OUTCMD ('?');              (* Inquiry *)   OUTCMD ('M');              (* Motor # *)   MN := CHR (M.MOTORNO);   OUTSIO (MN);   OUTCMD ('S');              (* get Status byte *)   TimeOut_Mcpu (SioStatus);   if (SioStatus)      then INSIO (STAT);   OUTCMD ('Z');              (* Zzzzz *)   M.STAT := STAT;   M.ERROR := (NOT SioStatus)              OR (NOT (STAT IN ['D','M','S','E']))              OR (STAT = 'E'); (* Error ? *)END;(*****)(* VECTORM changes a running MCPU motor's vector speed in real-time. *)PROCEDURE VECTORM (VAR M : MOTOR_TABLE);VAR BYTEL, BYTEH : CHAR;BEGIN   READYMCPU;                           (* Ready ? *)   OUTCMD ('W');                        (* Wake up *)   OUTCMD ('V');                        (* Vector Motion *)   OUTCMD ('M');                        (* Motor # *)   BYTEL := CHR (M.MOTORNO);   OUTSIO (BYTEL);   IF M.RAMPK < 0      THEN OUTCMD ('D')                 (* Deceleration Count *)      ELSE OUTCMD ('A');                (* Acceleration Count *)   INTBYTE (M.RAMPCNT, BYTEL, BYTEH);   OUTSIO (BYTEL);   OUTSIO (BYTEH);   OUTCMD ('Z');                        (* Zzzzz *)END;(* WHEREM samples a running MCPU motor's step count in real-time. *)PROCEDURE WHEREM (VAR M : MOTOR_TABLE);VAR BYTEL, BYTEH, BYTEX : CHAR;BEGIN   if NOT MCPU_Installed                (* why bother ? *)      then Exit;   READYMCPU;                           (* Ready ? *)   OUTCMD ('W');                        (* Wake up *)   OUTCMD ('V');                        (* Vector Motion *)   OUTCMD ('M');                        (* Motor # *)   BYTEL := CHR (M.MOTORNO);   OUTSIO (BYTEL);   OUTCMD ('P');                        (* Position report *)   OUTCMD ('L');                        (* Low byte *)   INSIO (BYTEL);   OUTCMD ('H');                        (* High byte *)   INSIO (BYTEH);   OUTCMD ('X');                        (* Extra byte *)   INSIO (BYTEX);   OUTCMD ('Z');                        (* Zzzzz *)   BYTEREAL (BYTEL, BYTEH, BYTEX, M.COUNT);END;(*****)PROCEDURE GETCOUNT_1200 (VAR M : MOTOR_TABLE);Begin   GetCount (M);End;PROCEDURE GETCOUNT_2100 (VAR M : MOTOR_TABLE);Begin   GetCount (M);End;(*****)