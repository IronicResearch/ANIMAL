(* SAVE MAP saves the axis map onto disk. *)PROCEDURE SAVE_MAP;VAR MAPNAME : STRING;    MAPFILE : FILE OF MAP_TABLE;    NAME_OK : BOOLEAN;    SAVE_OK : BOOLEAN;    ANSWER : CHAR;    I : integer;    Extn_Ok : Boolean;BEGIN   If Length (Default_Mapping) = 0      Then MapName := 'ANIMAL.MAP'      Else MapName := Default_Mapping;   Extn_Ok := False;   For I := 1 to Length (MapName) Do       If MapName [I] = '.'          Then Extn_Ok := True;   If Not Extn_Ok      Then MapName := MapName + '.MAP';   ASSIGN (MAPFILE, MAPNAME);{$IFDEF WRITE_PROTECT}   {$I-}   Reset (MapFile);   {$I+}   Name_OK := Not (IORESULT = 0);   If Not Name_OK      Then Write (^G);{$ELSE}   Name_OK := True;{$ENDIF}   If Name_OK      Then begin           {$I-}           REWRITE (MapFile);           {$I+}           SAVE_OK := (IORESULT = 0);           end;   IF SAVE_OK And Name_Ok      THEN BEGIN        {$I-}        FOR I := 1 TO MAX_AXES DO            WRITE (MAPFILE, AA [I].A);        CLOSE (MAPFILE);        {$I+}        IF IORESULT <> 0           THEN Write (^G);        Default_Mapping := MapName;        END;END;(* LOAD MAP loads the axis map onto disk. *)PROCEDURE LOAD_MAP;VAR MAPNAME : STRING;    MAPFILE : FILE OF MAP_TABLE;    NAME_OK : BOOLEAN;    LOAD_OK : BOOLEAN;    ANSWER : CHAR;    I : integer;    Extn_Ok : Boolean;BEGIN   If Length (Default_Mapping) = 0      Then MapName := 'ANIMAL.MAP'      Else MapName := Default_Mapping;   Extn_Ok := False;   For I := 1 to Length (MapName) Do       If MapName [I] = '.'          Then Extn_Ok := True;   If Not Extn_Ok      Then MapName := MapName + '.MAP';   ASSIGN (MAPFILE, MAPNAME);   {$I-}   RESET (MAPFILE);   {$I+}   LOAD_OK := (IORESULT = 0);   IF LOAD_OK      THEN BEGIN        {$I-}        FOR I := 1 TO MAX_AXES DO            READ (MAPFILE, AA [I].A);        CLOSE (MAPFILE);        {$I+}        IF IORESULT <> 0           THEN Write (^G);        FOR I := 1 TO MAX_AXES DO            WITH AA [I] DO                 BEGIN                 ID [1] := A.ID [1];                 ID [2] := A.ID [2];                 M.MOTORNO := A.NO;                 END;        Default_Mapping := MapName;        END;  (* IF loading ok *)END;Procedure Save_Axis_File;Begin   Save_Map;End;Procedure Load_Axis_File;Begin   Load_Map;End;(* SAVE UNITS saves the user units onto disk. *)PROCEDURE SAVE_UNITS;VAR UNITSNAME : STRING;    UNITSFILE : FILE OF CONVERSION_TABLE;    NAME_OK : BOOLEAN;    SAVE_OK : BOOLEAN;    ANSWER : CHAR;    Extn_Ok : Boolean;BEGIN   If Length (Default_Units) = 0      Then UnitsName := 'ANIMAL.UNT'      Else UnitsName := Default_Units;   Extn_Ok := False;   For I := 1 to Length (UnitsName) Do       If UnitsName [I] = '.'          Then Extn_Ok := True;   If Not Extn_Ok      Then UnitsName := UnitsName + '.UNT';   ASSIGN (UNITSFILE, UNITSNAME);{$IFDEF WRITE_PROTECT}   {$I-}   Reset (UnitsFile);   {$I+}   Name_OK := Not (IORESULT = 0);   If Not Name_OK      Then Write (^G);{$ELSE}   Name_OK := True;{$ENDIF}   If Name_OK      Then begin           {$I-}           REWRITE (UnitsFile);           {$I+}           SAVE_OK := (IORESULT = 0);           end;   IF SAVE_OK And Name_OK      THEN BEGIN        {$I-}        FOR I := 1 TO MAX_AXES DO            WRITE (UNITSFILE, AA [I].K);        CLOSE (UNITSFILE);        {$I+}        IF IORESULT <> 0           THEN Write (^G);        Default_Units := UnitsName;        END;END;(* LOAD UNITS loads the user units onto disk. *)PROCEDURE LOAD_UNITS;VAR UNITSNAME : STRING;    UNITSFILE : FILE OF CONVERSION_TABLE;    NAME_OK : BOOLEAN;    LOAD_OK : BOOLEAN;    ANSWER : CHAR;    Extn_Ok : Boolean;BEGIN   If Length (Default_Units) = 0      Then UnitsName := 'ANIMAL.UNT'      Else UnitsName := Default_Units;   Extn_Ok := False;   For I := 1 to Length (UnitsName) Do       If UnitsName [I] = '.'          Then Extn_Ok := True;   If Not Extn_Ok      Then UnitsName := UnitsName + '.UNT';   ASSIGN (UNITSFILE, UNITSNAME);   {$I-}   RESET (UNITSFILE);   {$I+}   LOAD_OK := (IORESULT = 0);   IF LOAD_OK      THEN BEGIN        {$I-}        FOR I := 1 TO MAX_AXES DO            READ (UNITSFILE, AA [I].K);        CLOSE (UNITSFILE);        {$I+}        IF IORESULT <> 0           THEN Write (^G);        Default_Units := UnitsName;        END;END;Procedure Save_Units_File;Begin   Save_Units;End;Procedure Load_Units_File;Begin   Load_Units;End;(* SAVE SPEED saves the motor profile onto disk. *)PROCEDURE SAVE_SPEED;VAR SPEEDNAME : STRING;    SPEEDFILE : FILE OF RUN_PROFILE;    NAME_OK : BOOLEAN;    SAVE_OK : BOOLEAN;    ANSWER : CHAR;    Extn_Ok : Boolean;BEGIN   If Length (Default_Speeds) = 0      Then SpeedName := 'ANIMAL.SPD'      Else SpeedName := Default_Speeds;   Extn_Ok := False;   For I := 1 to Length (SpeedName) Do       If SpeedName [I] = '.'          Then Extn_Ok := True;   If Not Extn_Ok      Then SpeedName := SpeedName + '.SPD';   ASSIGN (SPEEDFILE, SPEEDNAME);{$IFDEF WRITE_PROTECT}   {$I-}   Reset (SpeedFile);   {$I+}   Name_OK := Not (IORESULT = 0);   If Not Name_OK      Then Write (^G);{$ELSE}   Name_OK := True;{$ENDIF}   If Name_OK      Then begin           {$I-}           REWRITE (SpeedFile);           {$I+}           SAVE_OK := (IORESULT = 0);           end;   IF SAVE_OK And Name_OK      THEN BEGIN        {$I-}        FOR I := 1 TO MAX_AXES DO            WRITE (SPEEDFILE, AA [I].R);        CLOSE (SPEEDFILE);        {$I+}        IF IORESULT <> 0           THEN Write (^G);        Default_Speeds := SpeedName;        END;END;(* LOAD SPEED loads the motor profile onto disk. *)PROCEDURE LOAD_SPEED;VAR SPEEDNAME : STRING;    SPEEDFILE : FILE OF RUN_PROFILE;    NAME_OK : BOOLEAN;    LOAD_OK : BOOLEAN;    ANSWER : CHAR;    Extn_Ok : Boolean;BEGIN   If Length (Default_Speeds) = 0      Then SpeedName := 'ANIMAL.SPD'      Else SpeedName := Default_Speeds;   Extn_Ok := False;   For I := 1 to Length (SpeedName) Do       If SpeedName [I] = '.'          Then Extn_Ok := True;   If Not Extn_Ok      Then SpeedName := SpeedName + '.SPD';   ASSIGN (SPEEDFILE, SPEEDNAME);   {$I-}   RESET (SPEEDFILE);   {$I+}   LOAD_OK := (IORESULT = 0);   IF LOAD_OK      THEN BEGIN        {$I-}        FOR I := 1 TO MAX_AXES DO            READ (SPEEDFILE, AA [I].R);        CLOSE (SPEEDFILE);        {$I+}        IF IORESULT <> 0           THEN Write (^G);        Default_Speeds := SpeedName;        (* FOR I := 1 TO MAX_AXES DO            Init_Motor (AA [I]); *)        END;END;Procedure Save_Speed_File;Begin   Save_Speed;End;Procedure Load_Speed_File;Begin   Load_Speed;End;(* SAVE HOME saves the adjusted home positions onto disk. *)PROCEDURE SAVE_HOME;VAR HOMENAME : STRING;    HOMEFILE : FILE OF HOME_TABLE;    NAME_OK : BOOLEAN;    SAVE_OK : BOOLEAN;    ANSWER : CHAR;    Extn_Ok : Boolean;BEGIN   If Length (Default_Alignment) = 0      Then HomeName := 'ANIMAL.ALN'      Else HomeName := Default_Alignment;   Extn_Ok := False;   For I := 1 to Length (HomeName) Do       If HomeName [I] = '.'          Then Extn_Ok := True;   If Not Extn_Ok      Then HomeName := HomeName + '.ALN';   ASSIGN (HOMEFILE, HOMENAME);{$IFDEF WRITE_PROTECT}   {$I-}   Reset (HomeFile);   {$I+}   Name_OK := Not (IORESULT = 0);   If Not Name_OK      Then Write (^G);{$ELSE}   Name_OK := True;{$ENDIF}   If Name_OK      Then begin           {$I-}           REWRITE (HomeFile);           {$I+}           SAVE_OK := (IORESULT = 0);           end;   IF SAVE_OK And Name_OK      THEN BEGIN        {$I-}        FOR I := 1 TO MAX_AXES DO            WRITE (HOMEFILE, AA [I].H);        CLOSE (HOMEFILE);        {$I+}        IF IORESULT <> 0           THEN Write (^G);        Default_Alignment := HomeName;        END;END;(* LOAD HOME loads the aligned home positions from disk. *)PROCEDURE LOAD_HOME;VAR HOMENAME : STRING;    HOMEFILE : FILE OF HOME_TABLE;    NAME_OK : BOOLEAN;    LOAD_OK : BOOLEAN;    ANSWER : CHAR;    Extn_Ok : Boolean;BEGIN   If Length (Default_Alignment) = 0      Then HomeName := 'ANIMAL.ALN'      Else HomeName := Default_Alignment;   Extn_Ok := False;   For I := 1 to Length (HomeName) Do       If HomeName [I] = '.'          Then Extn_Ok := True;   If Not Extn_Ok      Then HomeName := HomeName + '.ALN';   ASSIGN (HOMEFILE, HOMENAME);   {$I-}   RESET (HOMEFILE);   {$I+}   LOAD_OK := (IORESULT = 0);   IF LOAD_OK      THEN BEGIN        {$I-}        FOR I := 1 TO MAX_AXES DO            READ (HOMEFILE, AA [I].H);        CLOSE (HOMEFILE);        {$I+}        IF IORESULT <> 0           THEN Write (^G);        Default_Alignment := HomeName;        END;END;Procedure Save_Alignment_File;Begin   Save_Home;End;Procedure Load_Alignment_File;Begin   Load_Home;End;(* SAVE TRIGGERS Saves The Dreaded Triggers Onto Disk. *)PROCEDURE SAVE_TRIGGERS;VAR TRIGGERNAME : STRING;    TRIGGERFILE : FILE OF TRIGGER_TABLE;    NAME_OK : BOOLEAN;    SAVE_OK : BOOLEAN;    ANSWER : CHAR;    Extn_Ok : Boolean;BEGIN   If Length (Default_Triggers) = 0      Then TriggerName := 'ANIMAL.TRG'      Else TriggerName := Default_Triggers;   Extn_Ok := False;   For I := 1 to Length (TriggerName) Do       If TriggerName [I] = '.'          Then Extn_Ok := True;   If Not Extn_Ok      Then TriggerName := TriggerName + '.TRG';   ASSIGN (TRIGGERFILE, TRIGGERNAME);{$IFDEF WRITE_PROTECT}   {$I-}   Reset (TriggerFile);   {$I+}   Name_OK := Not (IORESULT = 0);   If Not Name_OK      Then Write (^G);{$ELSE}   Name_OK := True;{$ENDIF}   If Name_OK      Then begin           {$I-}           REWRITE (TriggerFile);           {$I+}           SAVE_OK := (IORESULT = 0);           end;   IF SAVE_OK And Name_OK      THEN BEGIN        {$I-}        FOR I := 1 TO MAX_TRIG DO            WRITE (TRIGGERFILE, TRIGGER [I]);        CLOSE (TRIGGERFILE);        {$I+}        IF IORESULT <> 0           THEN Write (^G);        Default_Triggers := TriggerName;        END;END;(* LOAD TRIGGERS loads the triggers from disk. *)PROCEDURE LOAD_TRIGGERS;VAR TRIGGERNAME : STRING;    TRIGGERFILE : FILE OF TRIGGER_TABLE;    NAME_OK : BOOLEAN;    LOAD_OK : BOOLEAN;    ANSWER : CHAR;    Extn_Ok : Boolean;BEGIN   If Length (Default_Triggers) = 0      Then TriggerName := 'ANIMAL.TRG'      Else TriggerName := Default_Triggers;   Extn_Ok := False;   For I := 1 to Length (TriggerName) Do       If TriggerName [I] = '.'          Then Extn_Ok := True;   If Not Extn_Ok      Then TriggerName := TriggerName + '.TRG';   ASSIGN (TRIGGERFILE, TRIGGERNAME);   {$I-}   RESET (TRIGGERFILE);   {$I+}   LOAD_OK := (IORESULT = 0);   IF LOAD_OK      THEN BEGIN        {$I-}        FOR I := 1 TO MAX_TRIG DO            READ (TRIGGERFILE, TRIGGER [I]);        CLOSE (TRIGGERFILE);        {$I+}        IF IORESULT <> 0           THEN Write (^G);        Default_Triggers := TriggerName;        END;END;Procedure Save_Trigger_File;Begin   Save_Triggers;End;Procedure Load_Trigger_File;Begin   Load_Triggers;End;