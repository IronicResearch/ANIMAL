(* MCPU command block sequences. *)(* INIT EM ALL initializes all MCPU axes, primary and secondary. *)PROCEDURE INITM_ALL;BEGIN   (* Initialize primary MCPU axes according to odd motor # *)   READYMCPU;                     (* Ready? *)   OUTCMD ('W');                  (* Wake up... *)   FOR I := 1 TO MAX_AXES DO      (* Initialize block *)       WITH AA [I] DO            IF (M.MOTORNO MOD 2) = 1               THEN INITX (M);   OUTCMD ('O');                  (* Overhear *)   OUTCMD ('Z');                  (* Zzzzz...*)   WAITBACK;   (* Initialize secondary MCPU axes according to even motor # *)   READYMCPU;                     (* Ready? *)   OUTCMD ('W');                  (* Wake up... *)   FOR I := 1 TO MAX_AXES DO      (* Initialize block *)       WITH AA [I] DO            IF (M.MOTORNO MOD 2) = 0               THEN INITX (M);   OUTCMD ('O');                  (* Overhear *)   OUTCMD ('Z');                  (* Zzzzz...*)   WAITBACK;END;(* RUN EM ALL runs all (non-zero) MCPU motor axes. *)PROCEDURE RUNM_ALL;BEGIN   READYMCPU;                     (* Ready ? *)   OUTCMD ('W');                  (* Wake Up *)   FOR I := 1 TO MIN_AXES DO       WITH AA [I] DO            IF M.STEPCNT <> 0.0               THEN RUNX (M);     (* Drive block *)   OUTCMD ('Z');                  (* Zzzzz *)END;(* KILL EM ALL and let God sort em out...was once decreed by some Pope. *)(* KILL EM ALL now kills any and all MCPU motor axes, running or not. *)PROCEDURE KILLM_ALL;BEGIN   READYMCPU;                     (* Ready ? *)   OUTCMD ('W');                  (* Wake Up *)   FOR I := 1 TO MAX_AXES DO       KILLX (AA [I].M);          (* Kill block *)   OUTCMD ('Z');                  (* Zzzzz *)END;(* ZERO EM ALL zeroes all MCPU step positions. *)PROCEDURE ZEROM_ALL;BEGIN   READYMCPU;                     (* Ready ? *)   OUTCMD ('W');                  (* Wake Up *)   FOR I := 1 TO MIN_AXES DO       ZEROX (AA [I].M);          (* Zero block *)   OUTCMD ('Z');                  (* Zzzzz *)END;(* STATUS EM ALL fetches all the current info for all MCPU axes. *)PROCEDURE STATM_ALL;BEGIN   READYMCPU;                     (* Ready ? *)   OUTCMD ('W');                  (* Wake Up *)   FOR I := 1 TO MAX_AXES DO       STATX (AA [I].M);          (* Status ? *)   OUTCMD ('Z');                  (* Zzzzz *)END;