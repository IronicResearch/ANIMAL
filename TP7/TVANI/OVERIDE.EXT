(* Overide Animal MCPU axes. *)(* 80x25 text console version. *)Procedure MCPU_Overide;Var    A : integer;                        (* axis index selected *)(* Determine which Animal axis is selected according to ID string. *)Procedure CaseAxis (Var IDX : string; Var N : integer);Begin    IDX[1] := UpCase(IDX[1]);    IDX[2] := UpCase(IDX[2]);    for I := 1 to Max_Axes do        with AA[I] do             if (IDX[1] = ID[1]) AND (IDX[2] = ID[2])                then begin                N := I;                Break;                end;End;(* Select Animal axis for MCPU overide command. *)Procedure AxisMotor;Var Id : string;Begin    Write('Axis selection ', AA[A].ID, ' --> ');    RdlnStr(Id);    CaseAxis(Id, A);End;Procedure SelectAxis;Begin    Write ('Axis ', AA[A].ID, ' ');End;(* MCPU Overide Commands: *)Procedure InitMotor;Begin    Write('Init Motor ');    SelectAxis;    Writeln;    Write('Low  Speed = ');    RdlnInt(AA[A].M.LowSpd);    Write('High Speed = ');    RdlnInt(AA[A].M.HighSpd);    Write('Ramp Count = ');    RdlnInt(AA[A].M.RampCnt);    AA[A].M.AccelSt := TRUE;    AA[A].M.RampK := 0;    InitM(AA[A].M);End;Procedure RunMotor;Begin    Write('Run Motor ');    SelectAxis;    Write('Step Count = ');    RdlnReal(AA[A].M.StepCnt);    PrepM(AA[A].M);    RunM(AA[A].M);End;Procedure KillMotor;Begin    Write('Kill Motor ');    SelectAxis;    Writeln;    KillM(AA[A].M);End;Procedure StatusMotor;Begin    Write('Status for Motor ');    SelectAxis;    GetStat(AA[A].M);    Writeln(' --> ', AA[A].M.Stat, '...', Decode_Status(AA[A].M));End;Procedure PositionMotor;Begin    Write('Position for Motor ');    SelectAxis;    GetCount(AA[A].M);    Writeln(' --> ', AA[A].M.Count:1:0, ' steps');End;Procedure ZeroMotor;Begin    Write('Zero Motor ');    SelectAxis;    Writeln;    ZeroM(AA[A].M);End;Procedure MoveMotor;var distance : real;Begin    Write('Move Motor ');    SelectAxis;    Write('Distance in relative units = ');    RdlnReal(distance);    Convert(distance, AA[A].K.Kscale, AA[A].M.StepCnt);    PrepM(AA[A].M);    RunM(AA[A].M);End;Procedure GotoMotor;var destination : real;Begin    Write('Goto Motor ');    SelectAxis;    Write('Destination in absolute units = ');    RdlnReal(destination);    Convert(destination, AA[A].K.Kscale, AA[A].M.StepCnt);    GetCount(AA[A].M);    AA[A].M.StepCnt := AA[A].M.StepCnt - AA[A].M.Count;    PrepM(AA[A].M);    RunM(AA[A].M);End;Procedure LimitMotor;var direction : string;Begin    Write('Limit Motor ');    SelectAxis;    Write('Forward or Reverse ? ');    RdlnStr(direction);    case UpCase(direction[1]) of         'F','+': AA[A].M.Dir := FWD;         'R','-': AA[A].M.Dir := REV;         end;    HomeM(AA[A].M);End;Procedure UnlimitMotor;const SingleStepTime = 100;             (* millisec for single step pulse *)var direction : string;    N : integer;Begin    Write('Un-Limit Motor ');    SelectAxis;    Write('Forward or Reverse ? ');    RdlnStr(direction);    case UpCase(direction[1]) of         'F','+': AA[A].M.Dir := FWD;         'R','-': AA[A].M.Dir := REV;         end;    for N := 1 to AA[A].H.Steps do        begin        PulseM(AA[A].M);        Delay(SingleStepTime);        if (KeyPressed)           then Break;        end;End;Procedure NolimitMotor;Begin    Write('No-Limit for Motor ');    SelectAxis;    Writeln;    NolimitM(AA[A].M);End;Procedure VectorMotor;var speed : real;Begin    Write('Vector Motor ');    SelectAxis;    Write('to change +/- Speed = ');    RdlnReal(speed);    AA[A].M.RampCnt := Abs(Round(speed));    if (speed < 0)       then AA[A].M.RampK := -1       else AA[A].M.RampK := 1;    VectorM(AA[A].M);End;Procedure WhereisMotor;Begin    Write('Where is Motor ');    SelectAxis;    WhereM(AA[A].M);    Writeln('--> Steps running = ', AA[A].M.Count:1:0);End;(* MCPU Overide block commands affecting all motors: *)Procedure KillAllMotors;Begin    Writeln('Kill All Motors...');    KillM_All;End;Procedure InitAllMotors;Begin    Writeln('Initialize All Motors...');    InitM_All;End;Procedure StatAllMotors;Begin    Writeln('Status for All Motors...');    StatM_All;End;Procedure ZeroAllMotors;Begin    Writeln('Zero All Motors...');    ZeroM_All;End;(* Screen Displays for Overide. *)Const    Xmin = 1;   YUmin = 1;      YLmin = 12;    Xmax = 80;  YUmax = 12;     YLmax = 25;Var    Xsave, Ysave : integer;             (* XY cursor *)Procedure WindowUpperScreen;Begin    TPCRT.HiddenCursor;    Ysave := CRT.WhereY;    CRT.Window(Xmin,YUmin,Xmax,YUmax);    CRT.GotoXY(1,1);End;Procedure WindowLowerScreen;Begin    CRT.Window(Xmin,YLmin,Xmax,YLmax);    CRT.GotoXY(1,Ysave);    TPCRT.BlockCursor;End;Procedure InitOverideScreen;Begin    CRT.Window(Xmin,YUmin,Xmax,YLmax);    CRT.ClrScr;    Xsave := 1;    Ysave := 1;    WindowLowerScreen;End;Procedure ExitOverideScreen;Begin    CRT.Window(Xmin,YUmin,Xmax,YLmax);    CRT.ClrScr;    TPCRT.NormalCursor;End;Procedure OverideStatusDisplay;Begin    WindowUpperScreen;    for I := 1 to Max_Axes do        with AA[I] do        begin        Write (A.ID:2);        Write (A.No:5);        Write (A.Name:20);        Write (K.Cur_Posn:10:K.dp);        Write (K.Units:15);        Write (M.Count:10:0);        Write (M.Stat:5);        Write (Decode_Quick(M):10);        Writeln;        end;    Writeln;    WindowLowerScreen;End;Procedure UpdateOverideStatusDisplay;Begin    WindowUpperScreen;    for I := 1 to Max_Axes do        with AA[I] do        begin        CRT.GotoXY (28, I);             (* 2 + 5 + 20 + 1 *)        Write (K.Cur_Posn:10:K.dp);        CRT.GotoXY (53, I);             (* 2 + 5 + 20 + 10 + 15 + 1 *)        Write (M.Count:10:0);        Write (M.Stat:5);        Write (Decode_Quick(M):10);        end;    WindowLowerScreen;End;Procedure OverideHelpMenu;Var S : string[80];Begin    S :='Axis Init Run Kill Stat Posn Zero Move Goto Limit UnLim NoLim Vectr Where Quit';    Writeln(S);    Writeln;End;Const    SampleTime = 10;                    (* millisec for MCPU status sampling *)    DelayTime = 100;Var    Cmd : char;                         (* overide command from user *)    QuitOveride : boolean;              (* quit detection *)    T : integer;                        (* time delay counter *)Begin   (* Overide *)    InitOverideScreen;    OverideStatusDisplay;    OverideHelpMenu;    StatM_All;    Reconvert_All;    UpdateOverideStatusDisplay;    A := XX;                            (* selected axis *)    T := SampleTime;    QuitOveride := FALSE;    Repeat       T := SampleTime;       Repeat          Delay(DelayTime);             (* finer Delay(SampleTime) *)          Dec(T);          If (T <= 0)             Then begin             T := SampleTime;             StatM_All;             Reconvert_All;             UpdateOverideStatusDisplay;             end;       Until KeyPressed;       Cmd := ReadKey;       Cmd := UpCase(Cmd);       Case Cmd of       ^K  : KillAllMotors;       ^I  : InitAllMotors;       ^S  : StatAllMotors;       ^Z  : ZeroAllMotors;       'A' : AxisMotor;       'I' : InitMotor;       'R' : RunMotor;       'K' : KillMotor;       'S' : StatusMotor;       'P' : PositionMotor;       'Z' : ZeroMotor;       'M' : MoveMotor;       'G' : GotoMotor;       'L' : LimitMotor;       'U' : UnlimitMotor;       'N' : NolimitMotor;       'V' : VectorMotor;       'W' : WhereisMotor;       ^M  ,       'H' ,       '?' : OverideHelpMenu;       ^[  ,       'Q' : QuitOveride := TRUE;       end;    Until QuitOveride;    ExitOverideScreen;End;    (* Overide *)