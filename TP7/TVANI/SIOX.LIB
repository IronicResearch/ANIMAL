(* Serial IO routines, for selectable COM port. *)Const        COM1 =$03F8;                    (* COM1: base address *)        COM2 =$02F8;			(* COM2: base address *)        COM3 =$03E8;			(* COM3: base address *)        COM4 =$02E8;			(* COM4: base address *)        RXD =$01;			(* receiver data ready *)        TXD =$20;			(* transmitter data ready *)        DTR =$01;			(* data terminal ready *)        RTS =$02;			(* request to send *)        DLAB=$80;			(* divisor latch access bit *)        BAUD9600=12;			(* divisor value for 9600 baud *)        BAUD_81N=$03;			(* format for 8 data, 1 stop, no parity *)Const        COMX : integer = COM1;		(* whichever base address *)        COMDATA : integer = COM1+0;	(* serial data port *)        COMCTRL : integer = COM1+3;	(* serial control port *)        COMSTAT : integer = COM1+5;	(* serial status port *)        COMIER	: integer = COM1+1;	(* interrupt enable register *)        COMMCR	: integer = COM1+4;	(* modem control register *)(* Select serial port by base address. *)Procedure SetSio (portx : integer);Begin        Case portx of        1 : COMX := COM1;        2 : COMX := COM2;        3 : COMX := COM3;        4 : COMX := COM4;        else COMX := COM1;      (* base address *)        end;        COMDATA := COMX+0;	(* serial data port *)        COMCTRL := COMX+3;	(* serial control port *)        COMSTAT := COMX+5;	(* serial status port *)        COMIER	:= COMX+1;	(* interrupt enable register *)        COMMCR	:= COMX+4;	(* modem control register *)End;(* Reset serial port for baud rate and serial format. *)Procedure ResetSio;Begin	port[COMCTRL] :=  DLAB OR BAUD_81N;     (* access clock divisor *)	port[COMDATA] :=  BAUD9600;		(* set clock low byte *)	port[COMDATA+1] :=  0;			(* set clock high byte *)	port[COMCTRL] :=  BAUD_81N;		(* set serial format *)	port[COMIER] :=  0;			(* no interrupts *)	port[COMMCR] :=  RTS OR DTR;		(* handshake DTR + RTS ready *)End;(* Get serial input status. *)Procedure InsioSt (Var Status : boolean);Begin	Status := ((port[COMSTAT] AND RXD) = RXD);End;(* Input serial byte. *)Procedure InSio (Var Byte : char);Begin	repeat	until ((port[COMSTAT] AND RXD) = RXD);	Byte := char (port[COMDATA]);End;(* Get serial output status. *)Procedure OutsioSt (Var Status : boolean);Begin        Status := ((port[COMSTAT] AND TXD) = TXD);End;(* Output serial byte. *)Procedure OutSio (Var Byte : char);Begin	repeat	until ((port[COMSTAT] AND TXD) = TXD);	port[COMDATA] := integer (Byte);End;