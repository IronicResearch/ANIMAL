(*****)

(* extracted from EDITPLT unit *)

(* SAVE_PLOT saves the set of plotted XY points onto a disk file. *)
(* Modified binary file format in determine if any/all axes active. *)

(* PROCEDURE SAVE_PLOT; *)

(* LOAD_PLOT loads a previously saved XY plot from disk into memory. *)
(* Detect if old 7-axis format, or new variably-active-axis format. *)

(* PROCEDURE LOAD_PLOT; *)

(* extracted from GLOMPLT unit *)
(* {$I ASCII.EXT} *)

(* TEXT ASCII converts Point-Plotter files with ASCII text files. *)

(* Save_Text_File saves the plotter data text file. *)
(* Includes key frame points at beginning of file. *)

Procedure Save_Text_File (AscName : String; Var Save_Ok : Boolean);

Var I : Integer;
    P : Integer;
    S : String;
    AscPlot : Text;

Begin

   ASSIGN (ASCPLOT, ASCNAME);
   {$I-}
   Rewrite (ASCPLOT);
   {$I+}
   Save_OK := (IORESULT = 0);

   If Save_Ok
      Then begin
           {$I-}
           STR (KeyNo:4, S);
           WRITE (ASCPLOT, S, ',');
           For I := 1 to Max_Axes Do
               If AA [I].Spec
                  Then begin
                       S := '       ' + AA [I].ID;
                       Write (AscPlot, S, ',');
                       end;
           Writeln (AscPlot);
           WRITELN (ASCPLOT);

           FOR P := 1 TO KeyNo DO
               BEGIN
               STR (P:4, S);
               WRITE (ASCPLOT, S, ',');
               FOR I := 1 TO Max_Axes DO
                   If AA [I].Spec
                      Then BEGIN
                           STR (AA [I].Key [P]:9:(AA [I].K.dp), S);
                           WRITE (ASCPLOT, S, ',');
                           END;
               WRITELN (ASCPLOT);
               END;
           WRITELN (ASCPLOT);

           STR (XYNO:4, S);
           WRITE (ASCPLOT, S, ',');
           For I := 1 to Max_Axes Do
               If AA [I].Spec
                  Then begin
                       S := '       ' + AA [I].ID;
                       Write (AscPlot, S, ',');
                       end;
           Writeln (AscPlot);
           WRITELN (ASCPLOT);

           FOR P := 1 TO XYNO DO
               BEGIN
               STR (P:4, S);
               WRITE (ASCPLOT, S, ',');
               FOR I := 1 TO Max_Axes DO
                   If AA [I].Spec
                      Then BEGIN
                           STR (Get_Pt(I,P):9:(AA [I].K.dp), S);
                           WRITE (ASCPLOT, S, ',');
                           END;
               WRITELN (ASCPLOT);
               END;

           WRITELN (ASCPLOT);
           CLOSE (ASCPLOT);
           {$I+}
           SAVE_OK := (IORESULT = 0);
           end;
End;

(* CONVERT ASCII converts each plot point to the Point-Plotter's ASCII
(* screen display, and saves it into a text file. *)
(* Includes decimal point processing for real numbers. *)

PROCEDURE CONVERT_ASCII;

VAR C : Integer;
    AscName : String;
    Save_Ok : Boolean;
    Name_Ok : Boolean;
    Extn_Ok : Boolean;

BEGIN

   If Length (Default_Text) = 0
      Then ASCname := 'ANIMAL.PLT'
      Else ASCname := Default_Text;
   Extn_Ok := False;
   For C := 1 to Length (ASCname) Do
       If ASCname [C] = '.'
          Then Extn_Ok := True;
   If Not Extn_Ok
      Then ASCname := ASCname + '.PLT';

   If Displayed Then Writeln ('Proceeding to save ASCII file...', ASCNAME);

   Save_Text_File (AscName, Save_Ok);

   IF NOT SAVE_OK
      THEN If Displayed Then Writeln ('Error in completing file save.') Else
      ELSE If Displayed Then Writeln ('File saving completed.');

   If Save_Ok
      Then Default_Text := ASCname;

END;

(* READSTR reads a string of characters within a line in a text file. *)

PROCEDURE READSTR (VAR F : TEXT; VAR S : String);

VAR C : CHAR;
    I : INTEGER;

BEGIN

   S := '';
   I := 0;
   REPEAT
      READ (F, C);
      I := SUCC (I);
      S [I] := C;
   UNTIL C = ',';
   S [0] := CHR (PRED (I));

END;

(* SEARCH searches a string for valid numerals without spaces. *)

PROCEDURE SEARCH (VAR S : String);

VAR L : INTEGER;      (* length of string *)
    I : INTEGER;      (* index for string *)
    P : INTEGER;      (* position of first non-space character *)
    N : INTEGER;      (* number of remaining characters *)
    DONE : BOOLEAN;

BEGIN

   L := LENGTH (S);
   IF L > 0
      THEN BEGIN
           I := 1;
           P := 1;
           DONE := FALSE;
           REPEAT
              IF S [I] = ' '
                 THEN P := SUCC (P)
                 ELSE DONE := TRUE;
              I := SUCC (I);
           UNTIL (I > L) OR (P >= L) OR (DONE);
           N := L - P + 1;
           S := COPY (S, P, N);
           END;
END;

(* Load_Text_File loads the plotter data text file. *)
(* Includes checking if key points are read in too. *)

Procedure Load_Text_File (AscName : String; Var Load_Ok : Boolean);

Var I : Integer;
    P : Integer;
    S : String;
    R : Real;
    E : Integer;
    AscPlot : Text;

Begin

   ASSIGN (ASCPLOT, ASCNAME);
   {$I-}
   RESET (ASCPLOT);
   {$I+}
   Load_Ok := (IORESULT = 0);

   IF Load_Ok
      Then begin
           {$I-}
           READSTR (ASCPLOT, S);
           VAL (S, R, E);
           If E = 0
              Then KeyNo := TRUNC (R)
              Else KeyNo := 0;

           For I := 1 to Max_Axes Do
               AA [I].Spec := False;
           For I := 1 to Max_Axes Do
               If Not Eoln (AscPlot)
                  Then begin
                       ReadStr (AscPlot, S);
                       Delete (S, 1, (Length (S))-2);
                       With AA [I] Do
                            Spec := (S [1] = ID [1]) And
                                    (S [2] = ID [2]);
                       end;
           READLN (ASCPLOT);
           READLN (ASCPLOT);

           If KeyNo > Max_Points
              Then begin
              XyNo := KeyNo;
              KeyNo := 0;
              end

           Else begin

           FOR P := 1 TO KeyNo DO
               BEGIN
               READSTR (ASCPLOT, S);
               FOR I := 1 TO Max_Axes DO
                   If AA [I].Spec
                      Then BEGIN
                           READSTR (ASCPLOT, S);
                           SEARCH (S);
                           VAL (S, R, E);
                           If E = 0
                              Then AA [I].Key [P] := R
                              Else AA [I].Key [P] := 0.0;
                           END;
               READLN (ASCPLOT);
               END;
           READLN (ASCPLOT);

           READSTR (ASCPLOT, S);
           VAL (S, R, E);
           If E = 0
              Then XYNO := TRUNC (R)
              Else XYno := 0;

           For I := 1 to Max_Axes Do
               AA [I].Spec := False;
           For I := 1 to Max_Axes Do
               If Not Eoln (AscPlot)
                  Then begin
                       ReadStr (AscPlot, S);
                       Delete (S, 1, (Length (S))-2);
                       With AA [I] Do
                            Spec := (S [1] = ID [1]) And
                                    (S [2] = ID [2]);
                       end;
           READLN (ASCPLOT);
           READLN (ASCPLOT);

           end;    (* if key points are read *) 

           FOR P := 1 TO XYNO DO
               BEGIN
               READSTR (ASCPLOT, S);
               FOR I := 1 TO Max_Axes DO
                   If AA [I].Spec
                      Then BEGIN
                           READSTR (ASCPLOT, S);
                           SEARCH (S);
                           VAL (S, R, E);
                           If E = 0
                              Then Put_Pt (I, P, R)
                              Else Put_Pt (I, P, 0.0);
                           END;
               READLN (ASCPLOT);
               END;

           READLN (ASCPLOT);
           CLOSE (ASCPLOT);
           {$I+}
           Load_Ok := (IORESULT = 0);
           end;
End;

(* CONVERT BINARY converts each plot point from the Point-Plotter's ASCII
(* screen display back into the binary (real) values. *)
(* Includes decimal point processing for real numbers. *)

PROCEDURE CONVERT_BINARY;

VAR C : Integer;
    ASCNAME : STRING;
    Load_Ok : Boolean;
    Name_Ok : Boolean;
    Extn_Ok : Boolean;

BEGIN

   If Length (Default_Text) = 0
      Then ASCname := 'ANIMAL.PLT'
      Else ASCname := Default_Text;
   Extn_Ok := False;
   For C := 1 to Length (ASCname) Do
       If ASCname [C] = '.'
          Then Extn_Ok := True;
   If Not Extn_Ok
      Then ASCname := ASCname + '.PLT';

   If Displayed Then Writeln ('Proceeding to load ASCII file...', ASCNAME);

   Load_Text_File (AscName, Load_Ok);

   IF NOT Load_Ok
      THEN If Displayed Then Writeln ('Error in completing file load.') Else
      ELSE If Displayed Then Writeln ('File loading completed.');

   If Load_Ok
      Then Default_Text := ASCname;

END;

