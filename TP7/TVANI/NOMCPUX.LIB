
(* Null core MCPU sub-commands. *)

(* For use in nested MCPU 'Drive' command block sequences. *)

PROCEDURE DRIVEX (VAR M : MOTOR_TABLE);

BEGIN

END;

(* For use in nested MCPU 'Initialize' command block sequences. *)

PROCEDURE INITX (VAR M : MOTOR_TABLE);

BEGIN

END;

(* For use in nested MCPU 'Drive' command block sequences. *)

PROCEDURE RUNX (VAR M : MOTOR_TABLE);

BEGIN

END;

(* For use in nested MCPU 'Kill' command block sequences. *)

PROCEDURE KILLX (VAR M : MOTOR_TABLE);

BEGIN

END;

(* For use in nested MCPU 'Zero' command block sequences. *)

PROCEDURE ZEROX (VAR M : MOTOR_TABLE);

BEGIN

END;

(* GET_STAT gets the current motion status of an MCPU axis. *)

PROCEDURE GETSTAT (VAR M : MOTOR_TABLE);

BEGIN

   M.STAT := 'R';
   M.ERROR := FALSE;

END;

(* Compumotor-specific instructions. *)

PROCEDURE GETCOUNT_1200 (VAR M : MOTOR_TABLE);

BEGIN

END;

PROCEDURE GETCOUNT_2100 (VAR M : MOTOR_TABLE);

BEGIN

END;

(* GET_COUNT gets the current step count of an axis from the MCPU. *)

PROCEDURE GETCOUNT (VAR M : MOTOR_TABLE);

BEGIN

   M.COUNT := 0.0;

END;

(* GETX gets the status and position data from the MCPU, ready or not. *)

PROCEDURE GETX (VAR M : MOTOR_TABLE);

BEGIN

   M.STAT := 'R';
   M.COUNT := 0.0;
   M.ERROR := FALSE;

END;

(* For use in nested MCPU 'Status' command block sequences. *)

PROCEDURE STATX (VAR M : MOTOR_TABLE);

BEGIN

   GETX (M);

END;

