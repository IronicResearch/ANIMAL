(* MCPU Communications routines. *)(* Allows fall-through if MCPU_Installed status is not active. *)(* STD bus MCPU enables hardware handshake when ready to receive. *)(* STD bus MCPU responds with status byte after WAKEUP command. *)(* OUTPUT COMMAND outputs an ASCII character command to the MCPU. *)(* Note: OUTCMD passes by value, whereas OUTSIO passes by reference. *)PROCEDURE OUTCMD (BYTE : CHAR);BEGIN   OUTSIO (BYTE);END;(* TIME-OUT MCPU times out the MCPU's response to the serial input port. *)(* OK to use Delay() in 1-millisec intervals for 1-byte responses. *)PROCEDURE TIMEOUT_MCPU (VAR STATUS : BOOLEAN);CONST TIME = 1;                         (* 1 millisecond *)      TIMEOUT = 1000;                   (* 1000 milliseconds *)VAR T : INTEGER;BEGIN   T := 0;{$IFDEF MCPU_HARDWARE_HANDSHAKE}   REPEAT      OUTSIOST (STATUS);                (* 'Ready' MCPU hardware ? *)      T := SUCC (T);      IF NOT STATUS         THEN DELAY (TIME);   UNTIL (STATUS) OR (T >= TIMEOUT);{$ENDIF}   REPEAT      INSIOST (STATUS);                (* 'Ready' MCPU software ? *)      T := SUCC (T);      IF NOT STATUS         THEN DELAY (TIME);   UNTIL (STATUS) OR (T >= TIMEOUT);   if (T >= TIMEOUT)      then Inc(COM_Timeouts);END;(* RESET MCPU resets the MCPU with null commands via the serial port. *)PROCEDURE RESET_MCPU;BEGIN   OUTCMD ('Z');         (* Zzzzz *)END;(*****)(* INITIALIZE MCPU finds out if the MCPU is ready for communications(* with the host desktop computer. *)PROCEDURE INIT_MCPU;VAR CH : CHAR;    SIOST : BOOLEAN;BEGIN   if NOT MCPU_Installed      then begin           Writeln ('MCPU Not Installed.'^J);           Exit;           end;   REPEAT      RESET_MCPU;                       (* reset MCPU output *)      OutCmd('W');                      (* Wakeup call *)      TIMEOUT_MCPU (SIOST);             (* time-out MCPU input *)      if (SIOST)         then InSio (CH);      SIOST := SIOST AND (CH = 'R');    (* Ready to go ? *)      OutCmd('Z');                      (* go back to Zzzzz *)      IF NOT SIOST         THEN BEGIN              WRITELN ('MCPU Not Ready Yet');              WRITELN ('--Either Reset MCPU Hardware');              WRITELN ('--Or Ignore MCPU Software (ESCAPE)');              WRITE   ('--Or Abort Program Here (CONTROL-C) > ');              RDCON (CH);              WRITELN;              WRITELN;              IF CH = ^C                 THEN HALT;              END;   UNTIL SIOST OR (CH = ^[) (* OR (CH = ^M) *) OR (CH = ^C);   if (SIOST)      then WRITELN ('MCPU Ready...'^J)      else WRITELN ('MCPU Not Connected.'^J);   MCPU_Installed := SIOST;END;   (* procedure INIT MCPU *)(*****)(* READY MCPU loops until the MCPU is ready for command input. *)(* STD bus MCPU responds after WAKEUP command. *)PROCEDURE READYMCPU;VAR BYTE : CHAR;    SIOST : BOOLEAN;    Looper : integer;BEGIN   if NOT MCPU_Installed                (* why bother ? *)      then Exit;   Looper := 0;   REPEAT{$IFDEF MCPU_HARDWARE_HANDSHAKE}      REPEAT         OUTSIOST (SIOST);              (* 'Ready' MCPU hardware ? *)      UNTIL SIOST;{$ENDIF}      OUTCMD ('W');                     (* 'Wake up' MCPU *)      TimeOut_Mcpu (SIOST);      if (SIOST)         then INSIO (BYTE)         else Break;      Inc(Looper);      if (Looper >= 10)         then Break;   UNTIL (BYTE = 'R') OR (NOT SIOST);   (* 'Ready' MCPU software ? *)END;(* SYNC MCPU synchronizes MCPU communications to be ready for a command. *)PROCEDURE SYNC_MCPU;BEGIN   OUTCMD ('Z');         (* Zzzzz *)   READYMCPU;            (* Ready ? *)END;(* RE-SYNC MCPU re-syncronizes MCPU communications for an existing command. *)PROCEDURE RESYNC_MCPU;BEGIN   WRITELN ('MCPU Synchronization Error');   OUTCMD ('Z');         (* Zzzzz end *)   READYMCPU;            (* Ready again ? *)   OUTCMD ('W');         (* Wake up again ! *)END;(* IDLE MCPU syncronizes MCPU communications into idle. *)PROCEDURE IDLE_MCPU;BEGIN   OUTCMD ('Z');         (* Zzzzz ? *)   READYMCPU;            (* Ready ? *)   OUTCMD ('Z');         (* Zzzzz ! *)END;(* NULL MCPU nullifies an existing MCPU command sequence. *)PROCEDURE NULL_MCPU;BEGIN   OUTCMD ('Z');         (* Zzzzz *)END;(* OVERHEAR commands the MCPU to not respond again until all axes are over. *)PROCEDURE OVERHEAR;BEGIN   READYMCPU;            (* Ready ? *)   OUTCMD ('W');         (* Wake Up *)   OUTCMD ('O');         (* Overhear *)   OUTCMD ('Z');         (* Zzzzz *)END;(* PREPM prepares the step count and direction for an MCPU motor. *)PROCEDURE PREPM (VAR M : MOTOR_TABLE);BEGIN   IF M.STEPCNT < 0      THEN M.DIR := REV      ELSE M.DIR := FWD;   M.STEPCNT := ABS (M.STEPCNT);END;(* INTBYTE converts a 16-bit Pascal integer into its corresponding(* two 8-bit bytes for output to the serial interface. *)PROCEDURE INTBYTE (VAR INTVAL : INTEGER; VAR BYTE_L, BYTE_H : CHAR);BEGIN   BYTE_H := CHR (INTVAL DIV 256);   BYTE_L := CHR (INTVAL MOD 256);END;(* BYTEINT converts two 8-bit bytes back into a 16-bit Pascal integer(* for input from the serial interface. *)PROCEDURE BYTEINT (VAR BYTE_L, BYTE_H : CHAR; VAR INTVAL : INTEGER);BEGIN   INTVAL := ORD (BYTE_H) * 256 + ORD (BYTE_L);END;(* REALBYTE converts a 24-bit Pascal real into its corresponding(* three 8-bit bytes for output to the serial interface. *)PROCEDURE REALBYTE (VAR REALVAL : REAL; VAR BYTE_L, BYTE_H, BYTE_X : CHAR);VAR XX : INTEGER;    HH : INTEGER;    LL : INTEGER;    HHLL : REAL;    XXHHLL : REAL;BEGIN   IF REALVAL > 16777215.0      THEN XXHHLL := 16777215.0         (* max 24-bit real value *)      ELSE XXHHLL := REALVAL + 0.5;     (* real number round up *)   XX := TRUNC (XXHHLL / 65536.0);   HHLL := XXHHLL - XX * 65536.0;   HH := TRUNC (HHLL / 256.0);   LL := TRUNC (HHLL - HH * 256.0);   BYTE_X := CHR (XX);   BYTE_H := CHR (HH);   BYTE_L := CHR (LL);END;(* BYTEREAL converts three 8-bit bytes back into a 24-bit Pascal real(* for input from the serial interface. *)PROCEDURE BYTEREAL (VAR BYTE_L, BYTE_H, BYTE_X : CHAR; VAR REALVAL : REAL);BEGIN   REALVAL := ORD (BYTE_X) * 65536.0 + ORD (BYTE_H) * 256.0 + ORD (BYTE_L);   IF REALVAL > 8388607.0      THEN REALVAL := REALVAL - 16777216.0;     (* 2s complement wraparound *)END;(*****)PROCEDURE OUTSTR (VAR S : STRING);BeginEnd;PROCEDURE INTSTR (VAR INTVAL : INTEGER; VAR BYTESTR : STRING);BeginEnd;PROCEDURE REALSTR (VAR REALVAL : REAL; VAR BYTESTR : STRING);BeginEnd;PROCEDURE STRINT (VAR BYTESTR : STRING; VAR INTVAL : INTEGER);BeginEnd;PROCEDURE STREAL (VAR BYTESTR : STRING; VAR REALVAL : REAL);BeginEnd;(*****)