
(* Combined Serial/Parallel Input/Output Communications. *)
(* MCPU axes 1, 2, 3 use Parallel port interface for Compumotor PC 23. *)
(* MCPU axes 4, 5, 6, 7 use Serial port interface for Compumotor 2100. *)
(* Communications default to 'Serial' interface routines for compatibility. *)

(* Serial interface input/output routines. *)
(* Uses separate serial I/O module with interrupt support. *)

Uses SIO;

(* SETSIO sets the port for the serial interface at COMx. *)

Procedure SetSio_86 (portx : integer);
Begin
   SIO.SetSio(portx);
End;

(* RESETSIO resets the serial interface. *)

PROCEDURE ResetSio_86;
BEGIN
   SIO.ResetSio;
END;

(* INSIOST gets the receiver status from the serial interface. *)

PROCEDURE InSioSt_86 (VAR STATUS : BOOLEAN);
BEGIN
   SIO.InSioSt(Status);
END;

(* INSIO inputs a byte from the serial interface. *)

PROCEDURE InSio_86 (VAR BYTE : CHAR);
var siostat : boolean;
    timeout : longint;
BEGIN
   timeout := 1000;
   repeat
      SIO.InSioSt(siostat);
      if (not siostat)
         then Delay(1);
      Dec(timeout);
   until (siostat) or (timeout <= 0);

   if (siostat)
      then SIO.InSio(Byte);

   if (timeout <= 0)
      then Inc(SIO_Timeouts);
END;

(* OUTSIOST gets the transmitter handshake status from the serial interface. *)

PROCEDURE OutSioSt_86 (VAR STATUS : BOOLEAN);
BEGIN
   SIO.OutSioSt(Status);
END;

(* OUTSIO outputs a byte to the serial interface. *)

PROCEDURE OutSio_86 (VAR BYTE : CHAR);
BEGIN
   SIO.OutSio(Byte);
END;

(* Compumotor PC23 indexer in direct parallel port mode. *)

Const PIOD = $0300;
      PIOC = $0301;
      PIOS = $0301;

Var PC23_installed : boolean;           (* detection flag *)

(* RESETSIO resets the parallel interface. *)

PROCEDURE ResetPio_86;

Var timeout : longint;
Begin

   timeout := 1000;                     (* 1.000 sec *)
   Port [PIOC] := $64;                  (* allow PC23 to time out *)
   Repeat
      Delay (1);
      Dec (timeout);
   Until ((Port [PIOS] And $20) = $20) OR (timeout <= 0);
   Port [PIOC] := $40;                  (* reset interrupt *)
   Delay (1);
   Port [PIOC] := $60;
   Repeat
      Delay (1);
      Dec (timeout);
   Until ((Port [PIOS] And $7F) = $17) OR (timeout <= 0);
   Port [PIOC] := $20;                  (* reset watchdog timer *)
   Delay (1);
   Port [PIOC] := $60;

   if (timeout <= 0)
      then Inc(PIO_Timeouts);

   If (timeout <= 0)
      Then PC23_installed := False
      Else PC23_installed := True;

{$IFDEF DEBUG}
   if (timeout <= 0)
      then writeln('...ResetPio_86 timeout...');
{$ENDIF}

End;

(* INSIOST gets the receiver status from the parallel interface. *)

PROCEDURE InPioSt_86 (VAR STATUS : BOOLEAN);

Begin

   Status := False;
   If NOT PC23_installed
      Then Exit;

   Status := ((Port [PIOS] And $08) = $08);     (* PC23 output ? *)

End;

(* INSIO inputs a byte from the parallel interface. *)

PROCEDURE InPio_86 (VAR BYTE : CHAR);

Var timeout : longint;
    status : boolean;
Begin

   Byte := Chr (0);
   If NOT PC23_installed
      Then Exit;

   timeout := 1000;
   Repeat
      status := ((Port [PIOS] And $08) = $08);  (* PC23 output ? *)
      Dec(timeout);
      if (not status)
         then Delay(1);
   Until (status = true) Or (timeout <= 0);
   if (status)
      then Byte := Chr (Port [PIOD]);
   Port [PIOC] := $E0;                          (* handshake ? *)
   Repeat
      status := ((Port [PIOS] And $08) = $00);  (* handshake ! *)
      Dec(timeout);
      if (not status)
         then Delay (1);
   Until (status = true) Or (timeout <= 0);
   Port [PIOC] := $60;

   if (timeout <= 0)
      then Inc(PIO_Timeouts);

{$IFDEF DEBUG}
   if (timeout <= 0)
      then Write('...InPio_86 timeout...');
{$ENDIF}

{$IFDEF DEBUG}
   if (status = true)
      then Write(Byte);                 (* echo to console for debugging *)
   if (Byte = ^M)
      then Writeln;
{$ENDIF}

End;

(* OUTSIOST gets the transmitter status from the parallel interface. *)

PROCEDURE OutPioSt_86 (VAR STATUS : BOOLEAN);

Begin

   Status := False;
   If NOT PC23_installed
      Then Exit;

   Status := ((Port [PIOS] And $10) = $10);     (* PC23 input ready ? *)

End;

(* OUTSIO outputs a byte to the parallel interface. *)

PROCEDURE OutPio_86 (VAR BYTE : CHAR);

Var timeout : longint;
    status : boolean;
Begin

   If NOT PC23_installed
      Then Exit;

   timeout := 1000;
   Repeat
      status := ((Port [PIOS] And $10) = $10);  (* PC23 input ready to go ? *)
      Dec(timeout);
      if (not status)
         then Delay(1);
   Until (status = true) Or (timeout <= 0);
   Port [PIOD] := Ord (Byte);
   Port [PIOC] := $70;                          (* handshake ? *)
   Repeat
      status := ((Port [PIOS] And $10) = $00);  (* handshake ! *)
      Dec(timeout);
      if (not status)
         then Delay(1);
   Until (status = true) Or (timeout <= 0);
   Port [PIOC] := $60;

   if (timeout <= 0)
      then Inc(PIO_Timeouts);

{$IFDEF DEBUG}
   if (timeout <= 0)
      then Write('...OutPio_86 timeout...');
{$ENDIF}

End;

(* Full Serial/Parallel Compumotor Communications. *)

(* SETSIO sets the port for the interface. *)

Procedure SetSio (portx : integer);
Begin
   SetSio_86(portx);
End;

(* RESETSIO resets the interface. *)

Procedure ResetSio;

Begin

   ResetSio_86;

   ResetPio_86;

End;

(* INSIOST gets the receiver status from either interface. *)

Procedure InSioSt (Var Status : Boolean);

Begin

   Status := false;

   if (PIO_Enabled)
      then InPioSt_86 (Status);

   If (Not Status) and (SIO_Enabled)
      Then InSioSt_86 (Status);

End;

(* INSIO inputs a byte from either interface. *)

Procedure InSio (Var Byte : Char);

Var Status : Boolean;
    timeout : integer;

Begin

   Byte := Chr(0);
   Status := false;

   (* TODO: why does logic assume PIO and SIO input are exclusive??? *)

   if (PIO_Enabled)
      then begin
      InPioSt_86 (Status);              (* parallel byte ? *)
      If (Status)
         Then InPio_86 (Byte);
      end;

   if (SIO_Enabled) and (not Status)
      then begin
      InSioSt_86 (Status);              (* serial byte ? *)
      If (Status)
         Then InSio_86 (Byte);
      end;

{$IFDEF DEBUG}
   if (Status)
      then Write(Byte);                 (* echo to console for debugging *)
   if (Byte = ^M)
      then Writeln;
{$ENDIF}

End;

(* OUTSIOST gets the transmitter status from the interface. *)

Procedure OutSioSt (Var Status : Boolean);

Begin

   OutSioSt_86 (Status);

End;

(* OUTSIO outputs a byte to the interface. *)

Procedure OutSio (Var Byte : Char);

Begin

{$IFDEF DEBUG}
   Write(Byte);                 (* echo to console for debugging *)
   if (Byte = ^M)
      then Writeln;
{$ENDIF}

   OutSio_86 (Byte);
   OutPio_86 (Byte);

End;
