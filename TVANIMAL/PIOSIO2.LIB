
(* Combined Serial/Parallel Input/Output Communications. *)
(* MCPU axes 1, 2, 3 use Parallel port interface for Compumotor PC 23. *)
(* MCPU axes 4, 5, 6, 7 use Serial port interface for Compumotor 2100. *)
(* Communications default to 'Serial' interface routines for compatibility. *)

(* Serial interface input/output routines in 8086 machine code. *)

(* RESETSIO resets the serial interface at COM2. *)

PROCEDURE ResetSio_86;

BEGIN

INLINE ( $BA/$F9/$02/       {MOV DX,02F9     ;no interrupts          }
         $B0/$00/           {MOV AL,00                               }
         $EE/               {OUT DX,AL                               }

         $42/               {INC DX                                  }
         $42/               {INC DX                                  }
         $B0/$83/           {MOV AL,83       ;serial format          }
         $EE/               {OUT DX,AL                               }

         $4A/               {DEC DX                                  }
         $4A/               {DEC DX                                  }
         $4A/               {DEC DX                                  }
         $B0/$0C/           {MOV AL,0C       ;baud rate              }
         $EE/               {OUT DX,AL                               }
         $42/               {INC DX                                  }
         $B0/$00/           {MOV AL,00                               }
         $EE/               {OUT DX,AL                               }

         $42/               {INC DX                                  }
         $42/               {INC DX                                  }
         $B0/$03/           {MOV AL,03       ;enable transceiver     }
         $EE/               {OUT DX,AL                               }

         $42/               {INC DX                                  }
         $B0/$03/           {MOV AL,03       ;handshake              }
         $EE);              {OUT DX,AL                               }

END;

(* INSIOST gets the receiver status from the serial interface. *)

PROCEDURE InSioSt_86 (VAR STATUS : BOOLEAN);

VAR STBF : CHAR;

BEGIN

INLINE ( $BA/$FD/$02/       {MOV DX,02FD                             }
         $EC/               {IN AL,DX                                }
         $24/$01/           {AND AL,01       ;receiver ready?        }

         $BF/STBF/          {MOV DI,STBF     ;buffer address         }
         $36/$88/$03);      {MOV SS:[BP+DI],AL                       }

IF STBF = CHR (0)
   THEN STATUS := FALSE
   ELSE STATUS := TRUE;

END;

(* INSIO inputs a byte from the serial interface. *)

PROCEDURE InSio_86 (VAR BYTE : CHAR);

VAR CHBF : CHAR;

BEGIN

INLINE ( $BA/$FD/$02/       {MOV DX,02FD                             }
         $EC/               {IN AL,DX                                }
         $24/$01/           {AND AL,01       ;receiver ready?        }
         $74/$FB/           {JZ -0005                                }

         $BA/$F8/$02/       {MOV DX,02F8                             }
         $EC/               {IN AL,DX        ;input byte             }

         $BF/CHBF/          {MOV DI,CHBF     ;to buffer address      }
         $36/$88/$03);      {MOV SS:[BP+DI],AL                       }

BYTE := CHBF;

END;

(* OUTSIOST gets the transmitter handshake status from the serial interface. *)

PROCEDURE OutSioSt_86 (VAR STATUS : BOOLEAN);

VAR STBF : CHAR;

BEGIN

INLINE ( $BA/$FE/$02/       {MOV DX,02FE                             }
         $EC/               {IN AL,DX                                }
         $24/$20/           {AND AL,20       ;handshake ready?       }

         $BF/STBF/          {MOV DI,STBF     ;buffer address         }
         $36/$88/$03);      {MOV SS:[BP+DI],AL                       }

IF STBF = CHR (0)
   THEN STATUS := FALSE
   ELSE STATUS := TRUE;

END;

(* OUTSIO outputs a byte to the serial interface. *)

PROCEDURE OutSio_86 (VAR BYTE : CHAR);

VAR CHBF : CHAR;
    ECHO : CHAR;

BEGIN

CHBF := BYTE;

INLINE ( $BE/CHBF/          {MOV SI,CHBF     ;byte buffer address    }
         $36/$8A/$1A/       {MOV BL,SS:[BP+SI]                       }

         $BA/$FD/$02/       {MOV DX,02FD                             }
         $EC/               {IN AL,DX                                }
         $24/$20/           {AND AL,20       ;transmitter ready?     }
         $74/$FB/           {JZ -0005                                }

         $BA/$F8/$02/       {MOV DX,02F8                             }
         $8A/$C3/           {MOV AL,BL                               }
         $EE);              {OUT DX,AL       ;output byte            }
END;

(* Compumotor PC23 indexer in direct parallel port mode. *)

Const PIOD = $0300;
      PIOC = $0301;
      PIOS = $0301;

Var PC23_installed : boolean;           (* detection flag *)

(* RESETSIO resets the parallel interface. *)

PROCEDURE ResetPio_86;

Var timeout : longint;
Begin

   timeout := 1000;                     (* 1.000 sec *)
   Port [PIOC] := $64;                  (* allow PC23 to time out *)
   Repeat
      Delay (1);
      Dec (timeout);
   Until ((Port [PIOS] And $20) = $20) OR (timeout <= 0);
   Port [PIOC] := $40;                  (* reset interrupt *)
   Delay (1);
   Port [PIOC] := $60;
   Repeat
      Delay (1);
      Dec (timeout);
   Until ((Port [PIOS] And $7F) = $17) OR (timeout <= 0);
   Port [PIOC] := $20;                  (* reset watchdog timer *)
   Delay (1);
   Port [PIOC] := $60;

   if (timeout <= 0)
      then Inc(PIO_Timeouts);

   If (timeout <= 0)
      Then PC23_installed := False
      Else PC23_installed := True;

{$IFDEF DEBUG}
   if (timeout <= 0)
      then writeln('...ResetPio_86 timeout...');
{$ENDIF}

End;

(* INSIOST gets the receiver status from the parallel interface. *)

PROCEDURE InPioSt_86 (VAR STATUS : BOOLEAN);

Begin

   Status := False;
   If NOT PC23_installed
      Then Exit;

   Status := ((Port [PIOS] And $08) = $08);     (* PC23 output ? *)

End;

(* INSIO inputs a byte from the parallel interface. *)

PROCEDURE InPio_86 (VAR BYTE : CHAR);

Var timeout : longint;
    status : boolean;
Begin

   Byte := Chr (0);
   If NOT PC23_installed
      Then Exit;

   timeout := 1000;
   Repeat
      status := ((Port [PIOS] And $08) = $08);  (* PC23 output ? *)
      Dec(timeout);
      if (not status)
         then Delay(1);
   Until (status = true) Or (timeout <= 0);
   if (status)
      then Byte := Chr (Port [PIOD]);
   Port [PIOC] := $E0;                          (* handshake ? *)
   Repeat
      status := ((Port [PIOS] And $08) = $00);  (* handshake ! *)
      Dec(timeout);
      if (not status)
         then Delay (1);
   Until (status = true) Or (timeout <= 0);
   Port [PIOC] := $60;

   if (timeout <= 0)
      then Inc(PIO_Timeouts);

{$IFDEF DEBUG}
   if (timeout <= 0)
      then Write('...InPio_86 timeout...');
{$ENDIF}

{$IFDEF DEBUG}
   if (status = true)
      then Write(Byte);                 (* echo to console for debugging *)
   if (Byte = ^M)
      then Writeln;
{$ENDIF}

End;

(* OUTSIOST gets the transmitter status from the parallel interface. *)

PROCEDURE OutPioSt_86 (VAR STATUS : BOOLEAN);

Begin

   Status := False;
   If NOT PC23_installed
      Then Exit;

   Status := ((Port [PIOS] And $10) = $10);     (* PC23 input ready ? *)

End;

(* OUTSIO outputs a byte to the parallel interface. *)

PROCEDURE OutPio_86 (VAR BYTE : CHAR);

Var timeout : longint;
    status : boolean;
Begin

   If NOT PC23_installed
      Then Exit;

   timeout := 1000;
   Repeat
      status := ((Port [PIOS] And $10) = $10);  (* PC23 input ready to go ? *)
      Dec(timeout);
      if (not status)
         then Delay(1);
   Until (status = true) Or (timeout <= 0);
   Port [PIOD] := Ord (Byte);
   Port [PIOC] := $70;                          (* handshake ? *)
   Repeat
      status := ((Port [PIOS] And $10) = $00);  (* handshake ! *)
      Dec(timeout);
      if (not status)
         then Delay(1);
   Until (status = true) Or (timeout <= 0);
   Port [PIOC] := $60;

   if (timeout <= 0)
      then Inc(PIO_Timeouts);

{$IFDEF DEBUG}
   if (timeout <= 0)
      then Write('...OutPio_86 timeout...');
{$ENDIF}

End;

(* Full Serial/Parallel Compumotor Communications. *)

(* RESETSIO resets the interface. *)

Procedure ResetSio;

Begin

   ResetSio_86;

   ResetPio_86;

End;

(* INSIOST gets the receiver status from either interface. *)

Procedure InSioSt (Var Status : Boolean);

Begin

   InPioSt_86 (Status);

   If Not Status
      Then InSioSt_86 (Status);

End;

(* INSIO inputs a byte from either interface. *)

Procedure InSio (Var Byte : Char);

Var Status : Boolean;
    timeout : integer;

Begin

   (* TODO: why does logic assume PIO and SIO input are exclusive??? *)

   InPioSt_86 (Status);                 (* parallel byte ? *)
   If Status
      Then InPio_86 (Byte)

   Else begin
        InSioSt_86 (Status);            (* serial byte ? *)
        If Status
           Then InSio_86 (Byte)

        Else begin
        timeout := 1000;                (* 1.000 sec *)
        Repeat
           InSioSt_86 (Status);
           If NOT Status
              Then Delay (1);
           Dec (timeout);
        Until Status OR (timeout <= 0);
        If Status
           Then InSio_86 (Byte)
           Else Byte := Chr (0);        (* prevent lock-up *)
        if (timeout <= 0)
           then Inc(SIO_Timeouts);
        end;
   end;

{$IFDEF DEBUG}
   if (Status)
      then Write(Byte);                 (* echo to console for debugging *)
   if (Byte = ^M)
      then Writeln;
{$ENDIF}

End;

(* OUTSIOST gets the transmitter status from the interface. *)

Procedure OutSioSt (Var Status : Boolean);

Begin

   OutSioSt_86 (Status);

End;

(* OUTSIO outputs a byte to the interface. *)

Procedure OutSio (Var Byte : Char);

Begin

{$IFDEF DEBUG}
   Write(Byte);                 (* echo to console for debugging *)
   if (Byte = ^M)
      then Writeln;
{$ENDIF}

   OutSio_86 (Byte);
   OutPio_86 (Byte);

End;
