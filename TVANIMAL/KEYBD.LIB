
(* Keyboard Input Functions. *)

(* CLEAR KEYBOARD clears out the keyboard input status and input buffer. *)

PROCEDURE CLRKEY;

VAR Key : Char;

BEGIN

   If Keypressed
      Then Repeat
              Key := ReadKey;
           Until Not Keypressed;

END;

(* READ KEYBOARD STATUS gets the input status of the keyboard. *)

PROCEDURE RDKEYST (VAR KEYSTAT : BOOLEAN);

(* BEGIN

   KEYSTAT := KEYPRESSED;

END; *)

Begin

   If MouseInstalled
      Then EnableEventHandling;

   KeyStat := KeyPressed Or MousePressed;

End;

(* READ KEY reads in a character from the keyboard without echoing it. *)
(* Includes lower case to upper case conversion for ANIMAL comands. *)

PROCEDURE RDKEY (VAR KEY : CHAR);

(* BEGIN

   KEY := READKEY;
   KEY := UPCASE (KEY);

END; *)

Var KeyCode : Word;

Begin

   If MouseInstalled
      Then EnableEventHandling;

   Repeat
   Until KeyPressed Or MousePressed;

   If KeyPressed
      Then Key := ReadKey

   Else If MousePressed
        Then begin
        KeyCode := MouseKeyWord;
        Case KeyCode of
             MouseLft  : Key := ^M;
             MouseRt   : Key := ^[;
             MouseBoth : Key := '?';
             Else Key := Chr (0);
             end;
        end;

   Key := UpCase (Key);

End;

(* WRITE CONSOLE writes a single character to the console. *)

PROCEDURE WRCON (VAR CH : CHAR);

BEGIN

   IF CH = ^M
      THEN Write (^M)
   ELSE IF CH IN [^@..^_]
      THEN WRITE ('^', CHR (ORD (CH) + ORD ('@')))
      ELSE WRITE (CH);

END;

(* READ CONSOLE reads a single character from the console. (Echo output) *)
(* Includes lower case to upper case conversion for ANIMAL comands. *)

PROCEDURE RDCON (VAR CH : CHAR);

BEGIN

   RDKEY (CH);
   WRCON (CH);

END;

(* SCROLL KEYED pauses the keyboard with scroll control characters. *)

FUNCTION SCROLL_KEYED : BOOLEAN;

VAR KEY : CHAR;

BEGIN

   SCROLL_KEYED := FALSE;

   IF KEYPRESSED
      THEN BEGIN
           Key := ReadKey;
           IF KEY = ^Q
              THEN SCROLL_KEYED := TRUE;
           IF KEY = ^S
              THEN BEGIN
                   REPEAT
                   UNTIL KEYPRESSED;
                   Key := ReadKey;
                   IF KEY = ^Q
                      THEN SCROLL_KEYED := TRUE;
                   END;
           END;

END;

(* READ REAL reads a real number in mid-line. *)

PROCEDURE RDREAL (VAR R : REAL);

CONST XMAX = 80;
      YMAX = 25;

TYPE BYTE = 0..255;

VAR REAL_NUMBER : BOOLEAN;
    S : STRING [24];
    X : REAL;
    CODE : INTEGER;
    XCOL : BYTE;
    YROW : BYTE;
    KeyCode : Word;

BEGIN

   If MouseInstalled
      Then EnableEventHandling;

   Repeat
   Until KeyPressed Or MousePressed;

   If KeyPressed Then begin

   REPEAT

      XCOL := WHEREXabs;
      YROW := WHEREYabs;
      READ (S);
      READLN;
      XCOL := XCOL + LENGTH (S);
      IF YROW = WhereYabs
         THEN YROW := Yrow - 1;
      GOTOXYabs (XCOL, YROW);

      IF LENGTH (S) > 0
         THEN BEGIN
              VAL (S, X, CODE);
              REAL_NUMBER := (CODE = 0);
              IF REAL_NUMBER
                 THEN R := X
                 ELSE WRITE (^G, ' *** NUMBER: ');
              END
         ELSE REAL_NUMBER := TRUE;

   UNTIL REAL_NUMBER;

   end

   Else If MousePressed
        Then begin
        KeyCode := MouseKeyWord;
        Writeln;
        end;


END;

(* READLN REAL reads a real number and ends the line. *)

PROCEDURE RDLNREAL (VAR R : REAL);

VAR REAL_NUMBER : BOOLEAN;
    S : STRING [24];
    X : REAL;
    CODE : INTEGER;
    KeyCode : Word;
    LoopEnd : Boolean;
    Misc : Byte;
    Assignment : Boolean;

BEGIN

   If MouseInstalled
      Then EnableEventHandling;

   Repeat
   Until KeyPressed Or MousePressed;

   If KeyPressed Then begin

   REPEAT

      READLN (S);

      IF LENGTH (S) > 0
         THEN BEGIN
              VAL (S, X, CODE);
              REAL_NUMBER := (CODE = 0);
              IF REAL_NUMBER
                 THEN R := X
                 ELSE WRITE (^G, 'ERROR -- Please enter a number only: ');
              END
         ELSE REAL_NUMBER := TRUE;

   UNTIL REAL_NUMBER;

   end

   Else If MousePressed
           Then begin
                KeyCode := MouseKeyWord;
                Writeln;
                end


END;

(* READ INTEGER reads an integer number with Input checking toggled off. *)
(* Uses READ REAL for input and scales into integer range accordingly. *)

PROCEDURE RDINT (VAR I : INTEGER);

VAR R : REAL;

BEGIN

   R := I;
   RDREAL (R);
   IF R > MAXINT
        THEN I := MAXINT
   ELSE IF R < -1 * MAXINT
        THEN I := -1 * MAXINT
   ELSE I := ROUND (R);

END;

(* READLN INTEGER reads an integer number and ends the line. *)

PROCEDURE RDLNINT (VAR I : INTEGER);

VAR R : REAL;

BEGIN

   R := I;
   RDLNREAL (R);
   IF R > MAXINT
        THEN I := MAXINT
   ELSE IF R < -1 * MAXINT
        THEN I := -1 * MAXINT
   ELSE I := ROUND (R);

END;

(* READLN STRING reads a string and returns the original one if unaltered. *)

Procedure RdlnStr (Var S : String);

Var KeyCode : Word;

Begin

   If MouseInstalled
      Then EnableEventHandling;

   Repeat
   Until KeyPressed Or MousePressed;

   If CheckKbd (KeyCode)
      Then If NOT (Chr (Lo (KeyCode)) In [^M, ^[])
              Then Readln (S)
      Else If Lo (KeyCode) = Ord (^M)
              Then Readln
      Else If Lo (KeyCode) = Ord (^[)
              Then begin
                   KeyCode := ReadKeyWord;
                   Writeln;
                   end;

   If MousePressed
      Then begin
           KeyCode := MouseKeyWord;
           Writeln;
           end;

End;
