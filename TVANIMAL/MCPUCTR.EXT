(* Animal Motion Control routines. *)
(* Compumotor PC23 real-time contour version. *)

(* GET ALL gets the set of axis positions from the MCPU. *)

PROCEDURE GETALL;
BEGIN
   FOR I := 1 TO Max_Axes DO                  (* Status block *)
       WITH AA [I] DO
            IF SPEC
               THEN If Not M.Error
                    Then STATX (M);
END;

(* RUN ALL runs the set of MCPU axes synchronously. *)
(* Compumotor-specific command set. *)

PROCEDURE RUNALL;
VAR ChStr : String;
BEGIN

   OUTCMD (' ');
   OUTCMD ('D');                        (* pre-Drive all null *)
   OUTCMD ('0');
   OUTCMD (' ');

   FOR I := 1 TO Min_Axes DO            (* Drive block *)
       WITH AA [I] DO
            IF SPEC
               THEN If Not M.Error
                    Then RUNX (M);

   For I := 1 to Min_Axes Do            (* Go individual *)
       With AA [I] Do
            If Spec
               Then If Not M.Error
                    Then begin
                         IntStr (M.MotorNo, ChStr);
                         OutStr (ChStr);
                         OutCmd ('G');
                         OutCmd (^M );
                         end;
END;

(* TimeM generates a time delay in the Compumotor hardware. *)

Procedure TimeM (Var M : Motor_Table; Time : Real);
Var ChStr : String;
Begin
   OutCmd (' ');
   Str (M.MotorNo:1, ChStr);
   OutStr (ChStr);                      (* unit # *)
   OutCmd ('T');                        (* Time Delay *)
   Str (Time:5:3, ChStr);
   OutStr (ChStr);
   OutCmd (' ');
End;

(* Special Compumotor feature to send back CR after motor running. *)
(* Compumotor will respond only when normal stop, not switch stop. *)

Procedure WaitM (Var M : Motor_Table);
Var ChStr : string;
Var Com_Status : boolean;
    Com_Response : char;
Begin
   (* pre-clear serial input buffer *)
   InsioSt(Com_Status);
   If Com_Status
      Then InSio(Com_Response);

   OutCmd (' ');
   IntStr (M.MotorNo, ChStr);           (* Unit # *)
   OutStr (ChStr);
   OutCmd ('C');                        (* Send back CR *)
   OutCmd ('R');
   OutCmd (' ');
End;

(* Local WaitOver using Turbo Vision screens. *)
(* Uses same procedures and global variables as MCPU.WaitOver. *)
(* Compumotor-specific. *)

{$DEFINE DIRECT_RESPONSE}              (* for direct response to polling *)

Procedure Local_WaitOver;

Var Sample_Time : Integer;             (* MCPU communications sampling *)
Var Move_Status : Boolean;             (* motors moving status *)
    Answer : Word;
Var Com_Status : boolean;
    Com_Response : char;
    Timeout : integer;
Var XS, YS, ZS, RS : String;
Begin

{$IFDEF DIRECT_RESPONSE}
   Sample_Time := Mcpu_Delay + 1;       (* for status command polling *)
   Move_Status := False;
   Timeout := 10000 DIV Sample_Time;
{$ELSE}
   Sample_Time := 10;                   (* for serial line polling *)
   Move_Status := True;
   Timeout := 10000 DIV Sample_Time;
{$ENDIF}
   Repeat
      Timeout := 10000 DIV Sample_Time;
      Repeat
         Delay (Sample_Time);
         Dec (Timeout);
         (* TODO: AniApp.Idle; (* update desktop clock *)
{$IFNDEF DIRECT_RESPONSE}
         (* 1st wait for special Compumotor response *)
         InsioSt(Com_Status);
         If Com_Status
            Then InSio(Com_Response);
         (* then poll Compumotor axes... *)
         If Com_Status AND (Com_Response = ^M) Then
{$ENDIF}
         begin
         GetAll;
         Move_Status := False;
         For I := 1 to Max_Axes Do
             With AA [I] Do
             If Spec
                Then begin
                Move_Status := Move_Status OR Decode_Motion (M);
                If M.Stat = 'S'
                   Then Write (^G);
                end;
         (* Added display position info whenever over *)
         Reconvert_All;
         Str (AA [XX].K.Cur_Posn:10:AA[XX].K.dp, XS);
         Str (AA [YY].K.Cur_Posn:10:AA[YY].K.dp, YS);
         Str (AA [ZZ].K.Cur_Posn:10:AA[ZZ].K.dp, ZS);
         Str (AA [RR].K.Cur_Posn:10:AA[RR].K.dp, RS);
         XS := 'XX:' + XS + ' (' + AA[XX].M.Stat + ')   ';
         YS := 'YY:' + YS + ' (' + AA[YY].M.Stat + ')   ';
         ZS := 'ZZ:' + ZS + ' (' + AA[ZZ].M.Stat + ')   ';
         RS := 'RR:' + RS + ' (' + AA[RR].M.Stat + ')';
         GotoXYabs (1,24);
         Write(XS + YS + ZS + RS);
         ClrEol;
         end;
      Until User_Interrupt OR (NOT Move_Status) OR (Timeout <= 0);
      If User_Interrupt OR (Timeout <= 0)
         Then begin
         Answer := MessageBox ('Kill Motion Control Sequence?', Nil,
            mfWarning + mfYesbutton + mfNobutton + mfCancelbutton);
         If Answer = cmYes
            Then Kill_Sequence;
         If Answer <> cmNo
            Then Clear_Sequence;
      end;
   Until Sequence_Over OR NOT Move_Status;

End;

(***********************************)

(* Run Alignment Homing procedure. *)
(* Compumotor-specific command set. *)
Procedure Run_Alignment;

Var O : Integer;                       (* alignment order *)
    Answer : Word;
    Quit_Alignment : Boolean;          (* local interruption flag *)

Begin

Sequence_Over := False;                (* global interruption flag *)
Quit_Alignment := False;

For O := 1 to Max_Axes Do
    For I := 1 to Max_Axes Do
        With AA [I] Do
        If Spec And H.Spec
           Then If H.Order = O
                Then If NOT Quit_Alignment
                     Then begin
                     Sequence_Over := False;
                     M.Dir := H.Limit;
                     HomeM (M);
{$IFDEF DIRECT_RESPONSE}
                     TimeM (M, 1.0);
{$ELSE}
                     WaitM (M);
{$ENDIF}
                     Local_WaitOver;
                     If Sequence_Over
                        Then begin
                        Answer := MessageBox ('Quit Alignment Procedure?', Nil,
                           mfWarning + mfYesbutton + mfNobutton);
                        Quit_Alignment := (Answer = cmYes);
                        end;

                     If NOT Quit_Alignment
                        Then begin
                        Sequence_Over := False;
                        M.Dir := H.Align;
                        M.StepCnt := H.Count;
                        RunM (M);
{$IFDEF DIRECT_RESPONSE}
                        TimeM (M, 0.5);
{$ELSE}
                        WaitM (M);
{$ENDIF}
                        Local_WaitOver;
                        If Sequence_Over
                           Then begin
                           Answer := MessageBox ('Quit Alignment Procedure?', Nil,
                              mfWarning + mfYesbutton + mfNobutton);
                           Quit_Alignment := (Answer = cmYes);
                           end;
                        end;

                     If NOT Quit_Alignment
                        Then ZeroM (M);
                     end;
End;

(********************************)

(* Alignment aligns all axes into start-point/end-point positions. *)
(* Aligns according to Key-Frame Points, not Interpolated Points. *)

Procedure Align_Plot (P : Integer);

Var Distance : Real;
    I : Integer;
Begin

   Get_Axis_Updates;

   Init_All_Motor;  (* fast speeds *)
   InitM_All;

   For I := 1 to Max_Axes Do
       With AA [I] Do
            begin
            If Spec
               Then Distance := Key [P] - K.Cur_Posn
               Else Distance := 0.0;
            Convert (Distance, K.Kscale, M.StepCnt);
            PrepM (M);
            end;
   RunAll;
   WaitBack;

   Get_Axis_Updates;

End;

(* Camera Exposure fires a trigger out the external port. *)
Procedure Camera_Exposure;
Begin
End;

(* Run Stop Motion runs the plot in memory a single frame at a time. *)

Procedure Run_Stop_Motion;

Var Distance : Real;
    Quit_Stop_Motion : Boolean;
    Answer : Word;
    FS : String;
    XS, YS, ZS, RS : String;
Begin

Quit_Stop_Motion := False;

Repeat

   Trigger_Pulse (Trigger [1]);
   Trigger_Pulse (Trigger [2]);
   Camera_Exposure;
   Trigger_Pulse (Trigger [3]);

   For I := 1 to Max_Axes Do
       With AA [I] Do
            begin
            If Spec
               Then If EndPt < StartPt
                    Then Distance := Get_Pt (I, Frame_Count-1) - Get_Pt (I, Frame_Count)
                    Else Distance := Get_Pt (I, Frame_Count+1) - Get_Pt (I, Frame_Count)
               Else Distance := 0.0;
            Convert (Distance, K.Kscale, M.StepCnt);
            PrepM (M);
            end;
   Trigger_Pulse (Trigger [4]);
   RunAll;
   Local_WaitOver;
   Trigger_Pulse (Trigger [5]);

   If EndPt < StartPt
      Then Dec (Frame_Count)
      Else Inc (Frame_Count);

   If (Frame_Count < 1)
   Or (Frame_Count > XYno)
      Then Quit_Stop_Motion := True
      Else begin
           Str (Frame_Count:1, FS);
           Answer := MessageBox ('Single Frame Count = ' + FS,
              Nil, mfInformation + mfOkbutton + mfCancelbutton);
           Quit_Stop_Motion := (Answer = cmCancel);
           end;

Until Quit_Stop_Motion;

End;

(* Pre-Run-Plot runs the non-real-time axes with regular motion control. *)

Procedure Pre_Run_Plot;

(* MoveM runs the motor by the synchronized time interval. *)
Procedure MoveM (Index : Integer; Time, Distance : Real);
Begin
   With AA [Index] Do begin
        Convert (Distance, K.Kscale, M.StepCnt);
        PrepM (M);
        M.HighSpd := Round (Abs (M.StepCnt) / Time);
        M.RampCnt := Round ((M.HighSpd / R.Max_HighSpd) * R.Max_RampCnt);
        InitM (M);
        RunM  (M);
        end;
End;

(* Load-N-Go computes the distance and velocity for running in 'real-time'. *)
(* Scan for duplicate points if 3+ key-frame points. *)
(* Generate time delays if freeze frames between duplicate points. *)
Procedure Load_N_Go (I : Integer);
Var Distance : Real;
    Time : Real;
    F : Integer;
Begin

   If KeyNo > 2
      Then begin
      With AA [I] Do
      If EndPt > StartPt
        Then For F := 1 to KeyNo-1 Do
          If Key [F+1] = Key [F]
             Then begin
                  Time := Time_Key [F+1] - Time_Key [F];
                  TimeM (M, Time);
                  end
             Else begin
                  Distance := Key [F+1] - Key [F];
                  Time := Time_Key [F+1] - Time_Key [F];
                  MoveM (I, Time, Distance);
                  end
        Else For F := KeyNo downto 2 Do
          If Key [F-1] = Key [F]
             Then begin
                  Time := Time_Key [F] - Time_Key [F-1];
                  TimeM (M, Time);
                  end
             Else begin
                  Distance := Key [F-1] - Key [F];
                  Time := Time_Key [F] - Time_Key [F-1];
                  MoveM (I, Time, Distance);
                  end
      end
   Else If KeyNo = 2
        Then begin
        Distance := Get_Pt (I, EndPt) - Get_Pt (I, StartPt);
        Time := Preset_Count / Frame_Rate; (* 30.0; *)
        MoveM (I, Time, Distance);
        end;
End;

Begin   (* Pre_Run_Plot *)

   If AA [RR].Spec
      Then Load_N_Go (RR);              (* Rotate only *)

End;

(***************************************************************************)

(***** Compumotor PC23 *****)

(* Initialize Compumotor PC 23. *)
(* Select Limit Switches Active. *)

Procedure Init_PC23;

Begin

{$IFDEF ZOOM_MULTIPLEXED}
{$IFDEF ZOOM_SHUTDOWN}
   OutCmd ('3');                       (* special Z axis *)
   OutCmd ('S');                       (* Shut Down *)
   OutCmd ('T');
   OutCmd ('1');
   OutCmd (' ');
{$ELSE}
   OutCmd ('3');                       (* real-time Z axis *)
   OutCmd ('I');                       (* Immediate Output *)
   OutCmd ('O');
   OutCmd ('X');
   OutCmd ('X');
   OutCmd ('X');
   OutCmd ('X');
   OutCmd ('X');
   OutCmd ('0');                       (* OFF *)
   OutCmd (' ');
{$ENDIF}
{$ENDIF}

   OutCmd ('1');
   OutCmd ('L');                       (* Limit *)
   OutCmd ('D');                       (* Disable *)
   OutCmd ('0');                       (* Not... *)
   OutCmd (' ');

   OutCmd ('2');
   OutCmd ('L');
   OutCmd ('D');
   OutCmd ('0');
   OutCmd (' ');

   OutCmd ('1');
   OutCmd ('L');                       (* Limit *)
   OutCmd ('A');                       (* Acceleration *)
   OutCmd ('1');
   OutCmd ('0');
   OutCmd (' ');

   OutCmd ('2');
   OutCmd ('L');
   OutCmd ('A');
   OutCmd ('1');
   OutCmd ('0');
   OutCmd (' ');

   OutCmd ('1');
   OutCmd ('J');                       (* Joystick *)
   OutCmd ('D');                       (* Deadzone *)
   OutCmd ('0');                       (* 0.100 volts *)
   OutCmd ('.');
   OutCmd ('2');
   OutCmd ('0');
   OutCmd ('0');
   OutCmd (' ');

   OutCmd ('2');
   OutCmd ('J');
   OutCmd ('D');
   OutCmd ('0');
   OutCmd ('.');
   OutCmd ('2');
   OutCmd ('0');
   OutCmd ('0');
   OutCmd (' ');

   OutCmd ('1');
   OutCmd ('J');                       (* Joystick *)
   OutCmd ('Z');                       (* Zero *)
   OutCmd (' ');

   OutCmd ('2');
   OutCmd ('J');
   OutCmd ('Z');
   OutCmd (' ');

End;

(* Enable Compumotor Joystick. *)
(* Hardwired for X, Y, Z, and R axes. *)
(* Compumotor PC 23 joystick for X and Y. *)
(* Special multiplexer signal for Z axis. *)

Procedure Enable_Joystick;

Var ChStr : String;
Begin

{$IFDEF ZOOM_MULTIPLEXED}
   OutCmd (' ');
   OutCmd ('3');                       (* real-time Z axis *)
   OutCmd ('I');                       (* Immediate Output *)
   OutCmd ('O');
   OutCmd ('X');
   OutCmd ('X');
   OutCmd ('X');
   OutCmd ('X');
   OutCmd ('X');
   OutCmd ('0');                       (* OFF *)
   OutCmd (' ');
   Delay (50);
{$ENDIF}

   If AA [XX].Spec
      Then begin
           IntStr (AA [XX].M.MotorNo, ChStr);
           OutStr (ChStr);
           OutCmd ('J');
           OutCmd ('1');
           OutCmd (' ');
           Delay (50);                         (* multiplexer? *)
           end;

   If AA [YY].Spec
      Then begin
           IntStr (AA [YY].M.MotorNo, ChStr);
           OutStr (ChStr);
           OutCmd ('J');
           OutCmd ('1');
           OutCmd (' ');
           Delay (50);                         (* multiplexer? *)
           end;

   If AA [ZZ].Spec
      Then begin
           IntStr (AA [ZZ].M.MotorNo, ChStr);
           OutStr (ChStr);
           OutCmd ('J');
           OutCmd ('1');
           OutCmd (' ');
           Delay (50);                         (* multiplexer? *)
           end;

   If AA [RR].Spec
      Then begin
           IntStr (AA [RR].M.MotorNo, ChStr);
           OutStr (ChStr);
           OutCmd ('J');
           OutCmd ('1');
           OutCmd (' ');
           Delay (50);                         (* multiplexer? *)
           end;
End;

(* Disable Compumotor Joystick. *)
(* Hardwired for X, Y, Z, and R axes. *)

Procedure Disable_Joystick;

Var ChStr : String;
Begin

   IntStr (AA [XX].M.MotorNo, ChStr);
   OutStr (ChStr);
   OutCmd ('J');
   OutCmd ('0');
   OutCmd (' ');
   Delay (50);                         (* multiplexer? *)

   IntStr (AA [YY].M.MotorNo, ChStr);
   OutStr (ChStr);
   OutCmd ('J');
   OutCmd ('0');
   OutCmd (' ');
   Delay (50);                         (* multiplexer? *)

   IntStr (AA [ZZ].M.MotorNo, ChStr);
   OutStr (ChStr);
   OutCmd ('J');
   OutCmd ('0');
   OutCmd (' ');
   Delay (50);                         (* multiplexer? *)

   IntStr (AA [RR].M.MotorNo, ChStr);
   OutStr (ChStr);
   OutCmd ('J');
   OutCmd ('0');
   OutCmd (' ');
   Delay (50);                         (* multiplexer? *)

End;

(* Enable special Zoom Lens motion control interface. *)
(* Motor Enable signal line on Compumotor PC23 axis #3
(* controls mutiplexer for JoyStick port on Compumotor 2100 axis ZZ. *)
(* Multiplexer signal duplicated out output line #6. *)

Procedure Enable_Zoom_Lens;

Var ChStr : String;
Begin
{$IFDEF ZOOM_MULTIPLEXED}
{$IFDEF ZOOM_SHUTDOWN}
   OutCmd ('3');                       (* real-time Z axis *)
   OutCmd ('S');                       (* ShutDown signal *)
   OutCmd ('T');
   OutCmd ('0');                       (* 'Disable' --> ON *)
   OutCmd (' ');
{$ELSE}
   OutCmd ('3');                       (* real-time Z axis *)
   OutCmd ('I');                       (* Immediate Output *)
   OutCmd ('O');
   OutCmd ('X');
   OutCmd ('X');
   OutCmd ('X');
   OutCmd ('X');
   OutCmd ('X');
   OutCmd ('1');                       (* ON *)
   OutCmd (' ');
{$ENDIF}
   Delay  (100);
{$ENDIF}

   IntStr (AA [ZZ].M.MotorNo, ChStr);  (* actual Zoom axis *)
   OutStr (ChStr);
   OutCmd ('J');                       (* JoyStick port *)
   OutCmd ('1');                       (* Enable *)
   OutCmd (' ');

End;

(* Allows overiding the zoom lens with the joystick. *)

Procedure Overide_Zoom_Lens;

Var ChStr : String;
Begin
{$IFDEF ZOOM_MULTIPLEXED}
{$IFDEF ZOOM_SHUTDOWN}
   OutCmd ('3');                       (* real-time Z axis *)
   OutCmd ('S');                       (* ShutDown signal *)
   OutCmd ('T');
   OutCmd ('1');                       (* 'Enable' --> OFF *)
   OutCmd (' ');
{$ELSE}
   OutCmd ('3');                       (* real-time Z axis *)
   OutCmd ('I');                       (* Immediate Output *)
   OutCmd ('O');
   OutCmd ('X');
   OutCmd ('X');
   OutCmd ('X');
   OutCmd ('X');
   OutCmd ('X');
   OutCmd ('0');                       (* OFF *)
   OutCmd (' ');
{$ENDIF}
   Delay  (100);
{$ENDIF}

   IntStr (AA [ZZ].M.MotorNo, ChStr);  (* actual Zoom axis *)
   OutStr (ChStr);
   OutCmd ('J');                       (* JoyStick port *)
   OutCmd ('1');                       (* Enable *)
   OutCmd (' ');

End;

(* Disable special Zoom Lens motion control interface. *)

Procedure Disable_Zoom_Lens;

Var ChStr : String;
Begin

   IntStr (AA [ZZ].M.MotorNo, ChStr);  (* actual Zoom axis *)
   OutStr (ChStr);
   OutCmd ('J');                       (* JoyStick port *)
   OutCmd ('0');                       (* Disable *)
   OutCmd (' ');
   Delay (100);

{$IFDEF ZOOM_MULTIPLEXED}
{$IFDEF ZOOM_SHUTDOWN}
   OutCmd ('3');                       (* real-time Z axis *)
   OutCmd ('S');                       (* ShutDown *)
   OutCmd ('T');
   OutCmd ('1');                       (* 'Enable' --> OFF *)
   OutCmd (' ');
{$ELSE}
   OutCmd ('3');                       (* real-time Z axis *)
   OutCmd ('I');                       (* Immediate Output *)
   OutCmd ('O');
   OutCmd ('X');
   OutCmd ('X');
   OutCmd ('X');
   OutCmd ('X');
   OutCmd ('X');
   OutCmd ('0');                       (* OFF *)
   OutCmd (' ');
{$ENDIF}
{$ENDIF}

End;

(******************************************)

(* Compumotor PC23 error handlers. *)

(* PC23 internal watchdog timer should NEVER time-out. *)
Function PC23_Timeout_Error : boolean;
Begin
   PC23_Timeout_Error := ((Port[PIOS] AND $20) = $20)  (* watchdog timer *)
End;

(* If PC23 watchdog timer times out, you have to reset the PC23. *)
Function PC23_Crashed : boolean;
var answer : word;
    message : string;
Begin
   PC23_Crashed := FALSE;
   if (NOT PC23_Timeout_Error)
      then Exit;
   message := 'PC23 Hardware Fault = ' + HexB(Port[PIOS]) + ^M + ^M +
              'Reset Motion Controller?';
   answer := MessageBox (message, Nil, mfError + mfYesButton + mfNoButton);
   if (answer = cmYes)
      then Emergency_Reset;
   PC23_Crashed := (answer = cmYes);
End;

(***********************)

(* Real-Time-Plot outputs position intervals in real-time,
(* using Compumotor PC23 Timed-Data Streaming Mode. *)

Procedure Real_Time_Plot;

Var F : Integer;                        (* frame index for buffer *)
    Timeout : integer;

(* Emergency status notification. *)
Function Fuckedup_Bigtime : boolean;
var answer : word;
    message : string;
Begin
   Fuckedup_Bigtime := FALSE;
   if (PC23_Timeout_Error) OR (Timeout <= 0)
   then begin
   message := 'PC23 Interface Timeout = ' + HexB(Port[PIOS]) + ^M + ^M +
              'Reset Motion Controller?';
   answer := MessageBox (message, Nil, mfError + mfYesButton + mfNoButton);
   if (answer = cmYes)
      then Emergency_Reset;
   if (Timeout <= 0)
      then Inc(PIO_Timeouts);
   Fuckedup_Bigtime := TRUE;
   end;
End;

(* Output the Data Stream values to the Compumotor buffer. *)
Procedure Out_Stream_Data (I : Integer; P : Integer);

Const Max_Code = $7EFF;                (* Coded Data Byte Limit *)
      Max_Step = 15999;                (* Timed Data Speed Limit *)

Var Distance : Real;
    StepCount : Real;
    DataW : Integer;
    ByteL : Byte;
    ByteH : Byte;

Begin

   If EndPt < StartPt                   (* reverse *)
      Then Distance := Get_Pt (I, P-1) - Get_Pt (I, P)  (* delta behind *)
      Else Distance := Get_Pt (I, P+1) - Get_Pt (I, P); (* delta ahead *)

   Convert (Distance, AA [I].K.Kscale, StepCount);
   StepCount := StepCount * 25.0;
   If StepCount > 1.0 * MaxInt          (* max 16-bit value ? *)
      Then DataW := MaxInt
   Else If StepCount < -1.0 * MaxInt
      Then DataW := -1 * MaxInt
      Else DataW := Round (StepCount);
   If DataW > Max_Code                  (* max special code ? *)
      Then DataW := Max_Code
   Else If DataW < -1 * Max_Code
      Then DataW := -1 * Max_Code;
   If DataW > Max_Step
      Then DataW := Max_Step            (* max usable step rate ? *)
   Else If DataW < -1 * Max_Step
      Then DataW := -1 * Max_Step;

   If (EndPt > StartPt)                 (* forward *)
      Then If (Distance < 0.0) And ((Get_Pt (I, P) - Get_Pt (I, P-1)) > 0.0)
           Or (Distance > 0.0) And ((Get_Pt (I, P) - Get_Pt (I, P-1)) < 0.0)
           Then DataW := 0;             (* to change direction *)
   If (EndPt < StartPt)                 (* reverse *)
      Then If (Distance < 0.0) And ((Get_Pt (I, P) - Get_Pt (I, P+1)) > 0.0)
           Or (Distance > 0.0) And ((Get_Pt (I, P) - Get_Pt (I, P+1)) < 0.0)
           Then DataW := 0;             (* to change direction *)

   ByteL := Lo (Abs (DataW));
   ByteH := Hi (Abs (DataW));
   If DataW > 0
      Then ByteH := ByteH Or $80;      (* direction bit *)

{$IFDEF DEBUG}
   write (DataW, ' ');
{$ENDIF}

{$IFDEF MCPU_INSTALLED}

   Timeout := 10000;
   Repeat
      Dec(Timeout);
      if (Fuckedup_Bigtime) then Exit;
   Until ((Port [PIOS] And $10) = $10) OR (Timeout <= 0);
   Port [PIOD] := ByteH;
   Port [PIOC] := $71;
   Repeat
      Dec(Timeout);
      if (Fuckedup_Bigtime) then Exit;
   Until ((Port [PIOS] And $10) = $00) OR (Timeout <= 0);
   Port [PIOC] := $61;

   Repeat
      Dec(Timeout);
      if (Fuckedup_Bigtime) then Exit;
   Until ((Port [PIOS] And $10) = $10) OR (Timeout <= 0);
   Port [PIOD] := ByteL;
   Port [PIOC] := $71;
   Repeat
      Dec(Timeout);
      if (Fuckedup_Bigtime) then Exit;
   Until ((Port [PIOS] And $10) = $00) OR (Timeout <= 0);
   If ((I = XX) AND (AA[YY].Spec OR AA[ZZ].Spec))
   OR ((I = YY) AND (AA[ZZ].Spec))
      Then Port [PIOC] := $61           (* remain in binary mode *)
      Else Port [PIOC] := $60;          (* return to text mode *)

   if (Timeout <= 0)
      then Inc(PIO_Timeouts);
{$ENDIF}

End;

Begin   (* Real_Time_Plot *)

   OutCmd (' ');

{$IFDEF ZOOM_MULTIPLEXED}
   If AA [ZZ].Spec                      (* special Z axis multiplexer *)
      Then (* If Zoom_Overide
           Then Overide_Zoom_Lens
           Else *) Enable_Zoom_Lens;
{$ENDIF}

   If AA [XX].Spec                      (* Time Distance Mode *)
      Then begin
           OutCmd ('1');
           OutCmd ('Q');
           OutCmd ('2');
           OutCmd (^M );
           end;

   If AA [YY].Spec
      Then begin
           OutCmd ('2');
           OutCmd ('Q');
           OutCmd ('2');
           OutCmd (^M );
           end;

   If AA [ZZ].Spec
      Then begin
           OutCmd ('3');
           OutCmd ('Q');
           OutCmd ('2');
           OutCmd (^M );
           end;

   OutCmd ('M');                        (* Master/Slave Clock *)
   OutCmd ('S');
   OutCmd ('L');
   If AA [XX].Spec
      Then OutCmd ('1')
      Else OutCmd ('X');
   If AA [YY].Spec
      Then If AA [XX].Spec
           Then OutCmd ('1')
           Else OutCmd ('2')
      Else OutCmd ('X');
   If AA [ZZ].Spec
      Then If AA [XX].Spec
           Then OutCmd ('1')
           Else OutCmd ('3')
      Else OutCmd ('X');
   OutCmd (^M );

   If AA [XX].Spec                      (* Time Interval *)
      Then begin
           OutCmd ('1');
           OutCmd ('T');
           OutCmd ('D');
           OutCmd ('3');
           OutCmd ('4');
           OutCmd (^M );
           end;

   If AA [YY].Spec
      Then begin
           OutCmd ('2');
           OutCmd ('T');
           OutCmd ('D');
           OutCmd ('3');
           OutCmd ('4');
           OutCmd (^M );
           end;

   If AA [ZZ].Spec
      Then begin
           OutCmd ('3');
           OutCmd ('T');
           OutCmd ('D');
           OutCmd ('3');
           OutCmd ('4');
           OutCmd (^M );
           end;

   OutCmd ('M');                        (* Master/Slave Start *)
   OutCmd ('S');
   OutCmd ('S');
   OutCmd (^M );

   If EndPt < StartPt
     Then For F := StartPt-0 Downto EndPt+1 Do
       If Not User_Interrupt Then
       begin
       Frame_Count := F;
{$IFDEF MCPU_INSTALLED}
       if ((Port[PIOS] AND $20) = $20)  (* watchdog timer error *)
          then if PC23_Crashed
               then Exit;
(*       if (F MOD 100 = 0) then          (* every 100 points *)
            begin                       (* check PC23 data buffer *)
            Timeout := 10000;
            Repeat
               Dec(Timeout); Delay(1);
               if (PC23_Crashed) then Exit;
               if (Fuckedup_Bigtime) then Exit;
            Until ((Port [PIOS] And $80) = $80) OR (Timeout <= 0);
            if (Timeout <= 0)
               then Inc(PIO_Timeouts);
            end;
{$ENDIF}
       OutCmd ('S');
       OutCmd ('D');                    (* Stream Data *)
       If AA [XX].Spec
          Then Out_Stream_Data (XX, Frame_Count);
       If AA [YY].Spec
          Then Out_Stream_Data (YY, Frame_Count);
       If AA [ZZ].Spec
          Then Out_Stream_Data (ZZ, Frame_Count);
       (* Port [PIOC] := $60;           (* text mode *)
       OutCmd (^M );
       end

       Else

   Else If EndPt > StartPt
     Then For F := StartPt+0 to EndPt-1 Do
       If Not User_Interrupt Then
       begin
       Frame_Count := F;
{$IFDEF MCPU_INSTALLED}
       if ((Port[PIOS] AND $20) = $20)  (* watchdog timer error *)
          then if PC23_Crashed
               then Exit;
(*       if (F MOD 100 = 0) then          (* every 100 points *)
            begin                       (* check PC23 data buffer *)
            Timeout := 10000;
            Repeat
               Dec(Timeout); Delay(1);
               if (PC23_Crashed) then Exit;
               if (Fuckedup_Bigtime) then Exit;
            Until ((Port [PIOS] And $80) = $80) OR (Timeout <= 0);
            if (Timeout <= 0)
               then Inc(PIO_Timeouts);
            end;
{$ENDIF}
       OutCmd ('S');
       OutCmd ('D');                    (* Stream Data *)
       If AA [XX].Spec
          Then Out_Stream_Data (XX, Frame_Count);
       If AA [YY].Spec
          Then Out_Stream_Data (YY, Frame_Count);
       If AA [ZZ].Spec
          Then Out_Stream_Data (ZZ, Frame_Count);
       (* Port [PIOC] := $60;           (* text mode *)
       OutCmd (^M );
       end;

{$IFDEF DEBUG}
   writeln (' --- stream buffer exit --- ');
   repeat until keypressed;
{$ENDIF}
   MessageBox ('Continue after Motors Stop...', Nil, mfInformation + mfOkButton);

   OutCmd ('3');                        (* Time Mode Exit *)
   OutCmd ('Q');
   OutCmd ('0');
   OutCmd (^M );

   OutCmd ('2');
   OutCmd ('Q');
   OutCmd ('0');
   OutCmd (^M );

   OutCmd ('1');
   OutCmd ('Q');
   OutCmd ('0');
   OutCmd (^M );

{$IFDEF ZOOM_MULTIPLEXED}
   Disable_Zoom_Lens;                   (* special Z axis multiplexer *)
{$ENDIF}

End;

